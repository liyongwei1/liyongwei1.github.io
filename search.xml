<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go并发收集数据并统一存放到数组中</title>
      <link href="/2024/01/31/go-bing-fa-shou-ji-shu-ju-bing-tong-yi-cun-fang-dao-shu-zu-zhong/"/>
      <url>/2024/01/31/go-bing-fa-shou-ji-shu-ju-bing-tong-yi-cun-fang-dao-shu-zu-zhong/</url>
      
        <content type="html"><![CDATA[<p>一个项目中遇到的问题，需要调用多个函数并对结果做统一返回，钻研了一下，代码如下</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"sync"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// cmd.Execute()</span><span class="token keyword">defer</span> <span class="token function">timeCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>cal_f <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>demo1<span class="token punctuation">,</span> demo2<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> cal_f <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token function">cal</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">go</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>res<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> done<span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//此时主协程会阻塞，直到两个cal都执行完毕</span><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>   <span class="token comment">//关闭ch后，ch只读不写，当ch为空后，collect中的for循环执行完毕，进而执行done&lt;-true</span><span class="token operator">&lt;-</span>done      <span class="token comment">//此时主协程会被阻塞，直到collect执行完毕</span><span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">cal</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">collect</span><span class="token punctuation">(</span>res <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span><span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span> data<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span>done <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">timeCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tc <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"time cost = %v\n"</span><span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"hi"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">600</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"milk"</span><span class="token punctuation">,</span> <span class="token string">"john"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果如下</p><pre class="language-none"><code class="language-none">[hello hi milk john]time cost = 600.454949ms</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OCR模板匹配的一些思路</title>
      <link href="/2024/01/08/ocr-mo-ban-pi-pei-de-yi-xie-si-lu/"/>
      <url>/2024/01/08/ocr-mo-ban-pi-pei-de-yi-xie-si-lu/</url>
      
        <content type="html"><![CDATA[<p>OCR可能是实际落地最广最多的人工智能应用了，生活中各种各样的场景都可以使用到它，例如识别车牌号、身份证、发票等。<br>在研究学习中，我们可能更加注重于通用OCR识别能力，但是企业往往要求不仅能识别出图片上的文字，还要提供结构化的数据供后台系统进行处理。<br>一种常见的结构化思路就是通过模板匹配来进行处理，这里先说下大致的步骤：</p><ol><li>首先需要准备一张模板图片，然后送入通用OCR中识别出所有的文字以及对应的坐标;</li><li>选取一些容易识别且分布比较分散的字段作为<strong>定位字段</strong>，记录好字段值和坐标区域，最少选取四个区域，用于后续求解投影变换矩阵;</li><li>对模板上的字段进行分析，挑选出后续结构化需要的数据作为<strong>识别字段</strong>，记录好坐标区域;</li><li>上述步骤为前期准备，现在开始一张测试图片的处理流程，首先识别出测试图片的所有文字和坐标区域;</li><li>在测试图片的识别结果中搜索匹配模板的定位字段，从而得到了两组坐标区域值，一组来自模板，一组来自测试图片;</li><li>通过这两组坐标区域（实际上，每个区域选取一个坐标点即可，默认选取左上角的坐标点）求出投影变换矩阵，然后利用矩阵将投影变换作用到测试图片上的所有坐标区域，得到一组新的坐标区域,称为测试图片的投影坐标区域;</li><li>把模板识别字段的坐标区域与测试图片的投影坐标区域作iou计算，求出每个识别字段最匹配的投影坐标区域;</li><li>测试图片的每个投影坐标区域都对应一个识别结果，因此，对于模板的每个识别字段，我们都找到了一个识别结果，将其做一些正则化处理返回即可。</li></ol><h2 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h2><p>这里给出几个关键的代码</p><h3 id="计算投影变换矩阵"><a href="#计算投影变换矩阵" class="headerlink" title="计算投影变换矩阵"></a>计算投影变换矩阵</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2pts1 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pts2 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getPerspectiveTransform<span class="token punctuation">(</span>pts1<span class="token punctuation">,</span> pts2<span class="token punctuation">)</span></code></pre><h3 id="进行投影变换"><a href="#进行投影变换" class="headerlink" title="进行投影变换"></a>进行投影变换</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>    pts <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span>points<span class="token punctuation">]</span><span class="token punctuation">)</span>    new_pts <span class="token operator">=</span> cv2<span class="token punctuation">.</span>perspectiveTransform<span class="token punctuation">(</span>pts<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token keyword">return</span> new_pts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><h3 id="不规则四边形iou计算"><a href="#不规则四边形iou计算" class="headerlink" title="不规则四边形iou计算"></a>不规则四边形iou计算</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> shapely<span class="token punctuation">.</span>geometry <span class="token keyword">import</span> Polygon<span class="token keyword">def</span> <span class="token function">cal_iou</span><span class="token punctuation">(</span>area1<span class="token punctuation">,</span> area2<span class="token punctuation">)</span><span class="token punctuation">:</span>    poly1 <span class="token operator">=</span> Polygon<span class="token punctuation">(</span>area1<span class="token punctuation">)</span>    poly2 <span class="token operator">=</span> Polygon<span class="token punctuation">(</span>area2<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> poly1<span class="token punctuation">.</span>intersects<span class="token punctuation">(</span>poly2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1e-6</span>    inter_area <span class="token operator">=</span> poly1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>poly2<span class="token punctuation">)</span><span class="token punctuation">.</span>area    union_area <span class="token operator">=</span> poly1<span class="token punctuation">.</span>area <span class="token operator">+</span> poly2<span class="token punctuation">.</span>area <span class="token operator">-</span> inter_area    <span class="token keyword">return</span> inter_area <span class="token operator">/</span> <span class="token punctuation">(</span>union_area <span class="token operator">+</span> <span class="token number">1e-6</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OCR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2启动jupyter并提供对外访问</title>
      <link href="/2023/08/13/wsl2-qi-dong-jupyter-bing-ti-gong-dui-wai-fang-wen/"/>
      <url>/2023/08/13/wsl2-qi-dong-jupyter-bing-ti-gong-dui-wai-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>在WSL2中启动<code>jupyter</code>后，在本机可以直接使用<code>localhost:port</code>访问。<br>但是即使对<code>jupyter</code>配置了外部访问，外网设备也无法正常访问，此时需要做一个端口转发。</p><h3 id="写入WSL2的ip到Windows的hosts"><a href="#写入WSL2的ip到Windows的hosts" class="headerlink" title="写入WSL2的ip到Windows的hosts"></a>写入WSL2的ip到Windows的hosts</h3><p>将下述文件保存在wsl2的用户根目录下,文件名为<code>.export_ubuntu_localhost</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 获取wsl2的IP地址</span><span class="token assign-left variable">ipaddr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ifconfig</span> eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> <span class="token string">"inet\ "</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">`</span></span><span class="token comment"># 删除hosts中已经存在的域名记录ubuntu.localhost</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/ubuntu.localhost/d'</span> /mnt/c/Windows/System32/drivers/etc/hosts<span class="token comment"># 新增最新的域名记录ubuntu.localhost</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$ipaddr</span> ubuntu.localhost"</span> <span class="token operator">&gt;&gt;</span> /mnt/c/Windows/System32/drivers/etc/hosts</code></pre><h3 id="Windows新增端口转发"><a href="#Windows新增端口转发" class="headerlink" title="Windows新增端口转发"></a>Windows新增端口转发</h3><pre class="language-bat" data-language="bat"><code class="language-bat">netsh interface portproxy add v4tov4 listenport=8888 listenaddress=0.0.0.0 connectport=8888 connectaddress=ubuntu.localhostnetsh interface portproxy show allnetsh interface portproxy delete v4tov4 listenport=8888 listenaddress=0.0.0.0</code></pre><h3 id="配置启动jupyter的别名"><a href="#配置启动jupyter的别名" class="headerlink" title="配置启动jupyter的别名"></a>配置启动jupyter的别名</h3><p>打开用户根目录下的<code>.bashrc</code>文件，在最下方追加一下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 快速启动jupyter-lab</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">lab</span><span class="token operator">=</span><span class="token string">'conda activate torch_gpu;source .export_ubuntu_localhost;jupyter-lab'</span></code></pre><h3 id="每次登录后，直接执行lab"><a href="#每次登录后，直接执行lab" class="headerlink" title="每次登录后，直接执行lab"></a>每次登录后，直接执行lab</h3>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch中的backward背后的数学概念</title>
      <link href="/2023/07/15/pytorch-zhong-de-backward-bei-hou-de-shu-xue-gai-nian/"/>
      <url>/2023/07/15/pytorch-zhong-de-backward-bei-hou-de-shu-xue-gai-nian/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/backward.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter导出中文pdf</title>
      <link href="/2023/07/11/jupyter-dao-chu-zhong-wen-pdf/"/>
      <url>/2023/07/11/jupyter-dao-chu-zhong-wen-pdf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 <a href="https://nbconvert.readthedocs.io/en/latest/customizing.html">https://nbconvert.readthedocs.io/en/latest/customizing.html</a></p></blockquote><p>使用jupyter导出pdf时，中文会不显示，这是因为nbconvert的默认模板不支持中文字符，需要对该模板进行修改。</p><p>首先，使用</p><pre class="language-none"><code class="language-none">jupyter --path</code></pre><p>依次查看其中<code>data</code>的目录列表，看有没有<code>../share/jupyter/nbconvert</code>路径，若有，则进入到</p><pre class="language-none"><code class="language-none">../share/jupyter/nbconvert/templates/latex/</code></pre><p>找到<code>index.tex.j2</code>, 修改<code>documentclass</code>为<code>ctex</code></p><pre class="language-none"><code class="language-none">\documentclass[11pt]{ctex}</code></pre><p>然后重新导出即可。</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot实现用户上下文控制</title>
      <link href="/2023/04/05/springboot-shi-xian-yong-hu-shang-xia-wen-kong-zhi/"/>
      <url>/2023/04/05/springboot-shi-xian-yong-hu-shang-xia-wen-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在使用Spring Security的项目中，当用户登录成功后，Spring Security会自动注入<code>UserCredential</code>作为用户的上下文。<br>研究之后，在不使用Spring Security的项目中也实现了类似的效果。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>用户类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"request"</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>UserInfo</code>的作用域是请求，这意味每个请求进来的时候，SpringBoot会新建一个<code>UserInfo</code>，然后在请求完成后自动销毁这个<code>Bean</code>。</p><p>一般情况下，可以在拦截器里注入该Bean，设置相应的属性。然后在业务代码中也自动注入该Bean，直接拿值就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRpc最佳实践-Java</title>
      <link href="/2023/03/27/grpc-zui-jia-shi-jian-java/"/>
      <url>/2023/03/27/grpc-zui-jia-shi-jian-java/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>gRpc是一种可以跨语言的Rpc框架，它可以跨语言的原因在于其接口定义文件的平台无关性。<br>这一点与Dubbo形成鲜明对比，Dubbbo的接口文件直接就是Java的接口类，进而在云原生时代限制了Dubbo的跨语言发展。</p><p>使用gRpc开发的主要步骤有：</p><ol><li>定义proto接口文件，文件中约定了接口函数和入参出参的数据结构；</li><li>利用proto生成相应语言的接口代码，例如go，Java，python语言的代码等；</li><li>基于上述生产的代码进行编码，之后的服务端与客户端只需要约定好域名和端口即可完成调用。</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>下面以Java语言为例，给出示例代码。</p><p><img src="/images/grpc-java-ex1.drawio.png" alt="调用流程"></p><h3 id="编写接口定义文件-proto"><a href="#编写接口定义文件-proto" class="headerlink" title="编写接口定义文件 .proto"></a>编写接口定义文件 .proto</h3><pre class="language-proto" data-language="proto"><code class="language-proto">syntax = "proto3";package hello;option java_multiple_files = true;option java_package = "cn.liyongwei.api.hello";service HelloService {  rpc sayHello(HelloRequest) returns (HelloReply) {}}message HelloRequest {  string name = 1;}message HelloReply {  string message =1;}</code></pre><h3 id="生成Java接口类"><a href="#生成Java接口类" class="headerlink" title="生成Java接口类"></a>生成Java接口类</h3><ol><li>新建一个<code>maven</code>项目;</li><li>在<code>src/main</code>下新建一个<code>proto</code>文件夹，然后把上述的接口定义保存为<code>hello.proto</code>文件;</li><li>在<code>pom</code>文件引入<code>grpc</code>相关依赖，包括生成<code>Java</code>接口类的<code>maven</code>插件;<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.liyongwei.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>demo-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protobuf.version</span><span class="token punctuation">&gt;</span></span>3.21.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protobuf.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grpc.version</span><span class="token punctuation">&gt;</span></span>1.53.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grpc.version</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- CURRENT_GRPC_VERSION --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>grpc-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${grpc.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>grpc-netty-shaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>grpc-protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>grpc-stub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>protobuf-java-util<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${protobuf.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>kr.motd.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>os-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.xolstice.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>protobuf-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocArtifact</span><span class="token punctuation">&gt;</span></span>com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocArtifact</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginId</span><span class="token punctuation">&gt;</span></span>grpc-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginArtifact</span><span class="token punctuation">&gt;</span></span>io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginArtifact</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>compile-custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span></code></pre></li><li>在maven的插件中找到<code>proto</code>，右键点击<code>compile</code>，选择第二项进行编译。编译成功后，在<code>target/generated-class</code>中可以找到接口相关的类;<br><img src="/images/Snipaste_2023-03-27_21-26-44.jpg" alt="调用流程"></li><li>点击<code>maven/deploy</code>把这个接口项目发布到自己电脑的maven仓库中，就可以在其他项目中使用了。</li></ol><h3 id="服务端类"><a href="#服务端类" class="headerlink" title="服务端类"></a>服务端类</h3><ol><li>新建一个<code>maven</code>项目，在<code>pom</code>文件中引入如下依赖;<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.liyongwei.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>demo-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre></li><li>实现接口类逻辑<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloReply</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloServiceGrpc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span>stub<span class="token punctuation">.</span></span><span class="token class-name">StreamObserver</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">UnknownHostException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@GrpcService</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token keyword">extends</span> <span class="token class-name">HelloServiceGrpc<span class="token punctuation">.</span>HelloServiceImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HelloReply</span><span class="token punctuation">&gt;</span></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            hostname <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HelloReply</span> reply <span class="token operator">=</span> <span class="token class-name">HelloReply</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"hello, "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"! from "</span> <span class="token operator">+</span> hostname<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>定义注解，主要作用就是实现自动载入服务<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">GrpcService</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>启动类<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">BindableService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">Grpc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">InsecureServerCredentials</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">Server</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">ServerServiceDefinition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Server</span> server<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Application</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        application<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        application<span class="token punctuation">.</span><span class="token function">blockUntilShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerServiceDefinition</span><span class="token punctuation">&gt;</span></span> gRpcServices <span class="token operator">=</span> <span class="token function">scanServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">50051</span><span class="token punctuation">;</span>        server <span class="token operator">=</span> <span class="token class-name">Grpc</span><span class="token punctuation">.</span><span class="token function">newServerBuilderForPort</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token class-name">InsecureServerCredentials</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addServices</span><span class="token punctuation">(</span>gRpcServices<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Server started, listening on "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Use stderr here since the logger may have been reset by its JVM shutdown hook.</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** shutting down gRPC server since JVM is shutting down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** server shut down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">blockUntilShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerServiceDefinition</span><span class="token punctuation">&gt;</span></span> <span class="token function">scanServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerServiceDefinition</span><span class="token punctuation">&gt;</span></span> gRpcServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">URL</span> resources <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> currentDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentDirectory<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> currentDirectory<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> fileName <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> className <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"cn"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">GrpcService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">BindableService</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BindableService</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        gRpcServices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">bindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> gRpcServices<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>运行<code>main</code>方法，开始监听本地50051端口</li></ol><h3 id="客户端类"><a href="#客户端类" class="headerlink" title="客户端类"></a>客户端类</h3><ol><li>创建一个SpringBoot项目，引入<code>web</code>和上述的接口类<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.liyongwei.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>demo-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.8-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre></li><li>配置类<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloServiceGrpc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">Grpc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">InsecureChannelCredentials</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span><span class="token class-name">ManagedChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token comment">/** * gRPC Client的配置——启动、建立channel、获取stub、关闭等 * 需要注册为Spring Bean * * @author 江文 * @date 2020/4/12 3:27 下午 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrpcClientConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ManagedChannel</span> channel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GrpcClientConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Use stderr here since the logger may have been reset by its JVM shutdown hook.</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** shutting down gRPC server since JVM is shutting down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">GrpcClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** server shut down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> target <span class="token operator">=</span> <span class="token string">"localhost:50051"</span><span class="token punctuation">;</span>        <span class="token comment">// 开启channel</span>        channel <span class="token operator">=</span> <span class="token class-name">Grpc</span><span class="token punctuation">.</span><span class="token function">newChannelBuilder</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token class-name">InsecureChannelCredentials</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        channel<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloService"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">HelloServiceGrpc<span class="token punctuation">.</span>HelloServiceBlockingStub</span> <span class="token function">getHelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 通过channel获取到服务端的stub</span>        <span class="token keyword">return</span> <span class="token class-name">HelloServiceGrpc</span><span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>Controller类<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span>client<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloReply</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>liyongwei<span class="token punctuation">.</span>api<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">HelloServiceGrpc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GRpcController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloService"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">HelloServiceGrpc<span class="token punctuation">.</span>HelloServiceBlockingStub</span> helloService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HelloReply</span> helloReply <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> helloReply<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>启动项目，通过浏览器调用一下试试吧！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> GRpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂取模算法</title>
      <link href="/2023/03/27/kuai-su-mi-qu-mo-suan-fa/"/>
      <url>/2023/03/27/kuai-su-mi-qu-mo-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>刷LeetCode时突然碰到了这种求大指数的问题，这种将理论转化为工程的方式彻底吸引了我，有必要把学习过程记录下来。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>计算 $a^b \ mod \ c$ 的值</p><h3 id="为什么要在模-c-下计算？"><a href="#为什么要在模-c-下计算？" class="headerlink" title="为什么要在模 $c$ 下计算？"></a>为什么要在模 $c$ 下计算？</h3><p>由于指数函数快速增长的性质，$a, b$ 稍微大一点，$a^b$ 就很容易超出编程语言的数据范围，因此往往只能考虑在模 $c$ 下的值，这是一种无奈之举。</p><h3 id="快速幂算法"><a href="#快速幂算法" class="headerlink" title="快速幂算法"></a>快速幂算法</h3><p>首先假设 $a^b$ 的值不超过数值范围(long)，然后考虑计算其值。一种平凡的做法是在循环内依次累乘 $a$，时间复杂度为 $O(b)$；除此之外，还有一种在 $log(b)$ 下的快速幂算法，十分高效。</p><p>已知对于任何的正整数 $b\in\mathbb{Z_+}$，都有 $$b=\sum_{i=0}^{\infty} b_i2^i \  (b_i=0\ or\ 1)$$<br>举个例子，$15=2^3+2^2+2^1+2^0$。</p><p>进而，$$a^b=a^{\sum b_i2^i}=\prod a^{b_i2^i}$$<br>举例，$a^{15}=a^{2^0}a^{2^1}a^{2^2}a^{2^3}=a^{1}a^{2}a^{4}a^{8}$，要注意到$b_i$的取值不同。显然，$a^{8}$可由$a^{4}$直接平方获得。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系型数据库相关知识</title>
      <link href="/2023/02/20/guan-xi-xing-shu-ju-ku-xiang-guan-zhi-shi/"/>
      <url>/2023/02/20/guan-xi-xing-shu-ju-ku-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="关系型数据库和非关系型数据库的区别"><a href="#关系型数据库和非关系型数据库的区别" class="headerlink" title="关系型数据库和非关系型数据库的区别"></a>关系型数据库和非关系型数据库的区别</h2><p>在关系型数据库中，数据存储于一张张固定行列的表中；而非关系型数据库中，数据有文档、键值对、图、宽列等多种存储方式。</p><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="MyISAM和InnoDB存储引擎的区别"><a href="#MyISAM和InnoDB存储引擎的区别" class="headerlink" title="MyISAM和InnoDB存储引擎的区别"></a>MyISAM和InnoDB存储引擎的区别</h3><ol><li>MyISAM只能支持表级锁，InnoDB可以支持行级锁和MVCC；</li><li>MyISAM不支持事务，InnoDB支持事务；</li><li>MyISAM不支持数据库异常崩溃后安全恢复，InnoDB支持；</li><li>索引实现不一样；</li><li>InnoDB在多核情况下读写能力呈线性增长；</li><li>InnoDB支持外键（感觉无关紧要，毕竟现在尽量不用外键了）</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是逻辑上的一组操作，要么都执行，要么都不执行<br>用事务的<strong>原子性</strong>，<strong>隔离性</strong>和<strong>持久性</strong>来保证数据的<strong>一致性</strong>。</p><h4 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h4><ol><li>脏读</li><li>丢失更改</li><li>不可重复读</li><li>幻读</li></ol><h4 id="并发事务的控制方式"><a href="#并发事务的控制方式" class="headerlink" title="并发事务的控制方式"></a>并发事务的控制方式</h4><p>通过<strong>锁</strong>或者<strong>MVCC</strong>来避免并发事务带来的问题。</p><h5 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h5><ol><li>共享锁：读锁，事务在读取记录的时候获取共享锁，允许多个事务读取时也获取；</li><li>排他锁：写锁/独占锁。</li></ol><h6 id="MVCC（多版本并发控制方法）"><a href="#MVCC（多版本并发控制方法）" class="headerlink" title="MVCC（多版本并发控制方法）"></a>MVCC（多版本并发控制方法）</h6><p>对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。<br>MVCC 在 MySQL 中实现所依赖的手段主要是: 隐藏字段、read view、undo log。</p><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><ol><li>读取未提交</li><li>读取已提交</li><li>可重复读</li><li>可串行化</li></ol><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="常见索引列建议"><a href="#常见索引列建议" class="headerlink" title="常见索引列建议"></a>常见索引列建议</h4><ul><li>出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列</li><li>包含在 ORDER BY、GROUP BY、DISTINCT 中的字段</li><li>不要将符合 1 和 2 中的字段的列都建立一个索引， 通常将 1、2 中的字段建立联合索引效果更好</li><li>多表 join 的关联列</li></ul><h4 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序"></a>如何选择索引列的顺序</h4><ul><li>区分度高的放到联合索引的最左侧</li><li>字段长度小的放到联合索引的最左侧</li><li>使用最频繁的列放到联合索引最左侧</li></ul><h4 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h4><p>优点：在数据量大的情况下，索引能提高查询速度；通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性<br>缺点：创建索引需要耗费时间，影响插入效率；索引也是数据文件，占用存储空间</p><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p>在InnoDB中，主索引的键是主键，叶子节点的数据就是该条记录，其他索引叶子节点的数据是主键值。因此，使用辅助索引查到的只是主键值，还要再走一遍主索引才能拿到数据。</p><blockquote><p>MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。<br>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</p></blockquote><h4 id="联合索引和覆盖索引的区别"><a href="#联合索引和覆盖索引的区别" class="headerlink" title="联合索引和覆盖索引的区别"></a>联合索引和覆盖索引的区别</h4><p>使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。<br>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</p><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>索引和数据放在一起的就是聚簇索引，优点是无需回表查询。</p><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><ul><li>使用 <code>SELECT *</code> 进行查询;</li><li>创建了组合索引，但查询条件未准守最左匹配原则;</li><li>在索引列上进行计算、函数、类型转换等操作;</li><li>以 <code>%</code> 开头的 LIKE 查询比如 <code>like '%abc'</code>;</li><li>查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</li><li>发生隐式转换</li></ul><h3 id="MySQL日志"><a href="#MySQL日志" class="headerlink" title="MySQL日志"></a>MySQL日志</h3><p>二进制日志 binlog（归档日志），事务日志 redo log（重做日志）和 undo log（回滚日志）</p><h4 id="redo-log-重做日志）"><a href="#redo-log-重做日志）" class="headerlink" title="redo log(重做日志）"></a>redo log(重做日志）</h4><p>redo log（重做日志）是InnoDB存储引擎独有的，它让MySQL拥有了崩溃恢复能力。<br>比如 MySQL 实例挂了或宕机了，重启时，InnoDB存储引擎会使用redo log恢复数据，保证数据的持久性与完整性。</p><h5 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h5><p>每次更新数据时都将更新信息记录到重做日志缓存中，然后当事务提交后，使用默认策略将缓存写到硬盘中的重做日志中。</p><h5 id="存储形式"><a href="#存储形式" class="headerlink" title="存储形式"></a>存储形式</h5><p>硬盘上存储的 redo log 日志文件不只一个，而是以一个日志文件组的形式出现的，每个的redo日志文件大小都是一样的。比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录4G的内容。<br>它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，</p><h4 id="bin-log-归档日志）"><a href="#bin-log-归档日志）" class="headerlink" title="bin log(归档日志）"></a>bin log(归档日志）</h4><p>逻辑日志，记录语句的原始逻辑，用来数据备份，主从复制等。</p><h5 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h5><ul><li>statement: 记录的内容是SQL语句原文</li><li>row: 记录的内容不再是简单的SQL语句了，还包含操作的具体数据。为了解决语句中包含now()之类语句而产生的数据不一致。</li><li>mixed 混合形式，仅在需要实时计算的地方采用row。</li></ul><h5 id="执行时机-1"><a href="#执行时机-1" class="headerlink" title="执行时机"></a>执行时机</h5><ul><li>事务执行过程中，先把日志不断写到binlog cache，事务提交的时候，再把binlog cache合并后写到binlog文件中。</li><li>二进制日志仅在事务提交时记录，并且对于每一个事务，仅包含对应事务的一个日志</li><li>重做日志其记录的物理操作日志，因此每个事务对应多个日志条目，并且事务的重做日志写入是并发的，并非在事务提交时写入，故其在文件中记录的顺序并非是事务开始的顺序（下图中带有*的，意为该事务的提交）</li></ul><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p>在事务执行过程中记录的redo log不会直接提交，而是进入prepare预备阶段，等事务执行完毕且bin log写入后，再将redo log转为commit阶段。</p><h4 id="undo-log-回滚日志）"><a href="#undo-log-回滚日志）" class="headerlink" title="undo log(回滚日志）"></a>undo log(回滚日志）</h4><ul><li>当事务回滚时用于将数据恢复到修改前的样子</li><li>另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>MySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议相关知识</title>
      <link href="/2023/02/17/wang-luo-xie-yi-xiang-guan-zhi-shi/"/>
      <url>/2023/02/17/wang-luo-xie-yi-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://javaguide.cn/cs-basics/network">https://javaguide.cn/cs-basics/network</a></p></blockquote><h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><ol><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol><h1 id="TCP-IP-四层模型"><a href="#TCP-IP-四层模型" class="headerlink" title="TCP/IP 四层模型"></a>TCP/IP 四层模型</h1><ol><li>应用层（HTTP，DNS，SSH）</li><li>传输层（TCP，UDP）</li><li>网络层（IP，NAT，ARP）</li><li>网络接口层（MAC，以太网）</li></ol><p><img src="/images/18751695-0f500a5ca0006cfe.png" alt="OSI七层模型和TCP/IP四层模型对比"></p><h2 id="HTTP协议（应用层）"><a href="#HTTP协议（应用层）" class="headerlink" title="HTTP协议（应用层）"></a>HTTP协议（应用层）</h2><ul><li>位于应用层，基于传输层的TCP协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。</li><li>无状态的协议，使用Cookie，Session等记住用户的状态。</li></ul><h3 id="HTTP1-0"><a href="#HTTP1-0" class="headerlink" title="HTTP1.0"></a>HTTP1.0</h3><ul><li>最早出现于1996年</li></ul><h3 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h3><ul><li>缓存处理， 提供了更多的缓存头用来控制缓存策略；</li><li>引入range头域，允许只请求资源的一部分，支持了断点续传；</li><li>引入更多错误状态码</li><li>引入Host头域，可以访问同一IP地址的不同域名</li><li>支持长连接，不用每次都要三次握手</li></ul><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><ul><li>二进制分帧，所有的帧都采用二进制编码</li><li>多路复用，每个数据流都可以拆分成很多互不依赖的帧，这些帧可以独立发送，接收端再组合起来。HTTP2.0的连接都是持久化的，每个域名一个连接。</li><li>请求优先级，帧可以设置优先级</li><li>header压缩，HTTP1.1的header带有大量信息，且每次都要重复发送，HTTP2.0对此进行了压缩</li><li>服务端推送，服务端可以对一个请求发送多个响应</li></ul><h2 id="TCP协议（传输层）"><a href="#TCP协议（传输层）" class="headerlink" title="TCP协议（传输层）"></a>TCP协议（传输层）</h2><p>面向连接，可靠，基于字节流<br>基于字节流是指，TCP只处理二进制数据，是无法区分数据之间的关系的，为此，HTTP协议在每个数据头标记了数据的长度，以此区分不同的数据。</p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>为了确认两件事情，一是客户端的发送与接受功能是否正常；二是服务端的发送与接受能力是否正常。</p><ul><li>第一次握手，客户端发出消息，服务端接受到消息后，服务端确认了客户端的发送功能和服务端的接受功能正常；</li><li>第二次握手，服务端发送消息，客户端接受到消息后，客户端确认了客户端的发送接受功能和服务端的发送接受功能正常；</li><li>第三次握手，客户端发送消息，服务端接受消息后，服务端确认了客户端的接受功能和服务端的发送功能正常。</li></ul><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>TCP是全双工通信，可以双向传输数据。</p><ul><li>第一次挥手，客户端发出FIN消息，服务端接受到消息后，确认客户端没有消息发出了；</li><li>第二次挥手，服务端发出ACK消息，客户端接收到消息后，确认服务端知道了客户端不再发送消息的事实；</li><li>第三次挥手，服务端发出FIN消息，客户端接收到消息后，确认服务端没有消息发出了；</li><li>第四次挥手，客户端发出ACK消息，服务端接受到消息后，确认客户端知道了服务端不再发送消息的事实。</li></ul><h3 id="如何保证数据传输的可靠性"><a href="#如何保证数据传输的可靠性" class="headerlink" title="如何保证数据传输的可靠性"></a>如何保证数据传输的可靠性</h3><ol><li><strong>基于数据块传输</strong> ：应用数据被分割成 TCP 认为最适合发送的数据块，再传输给网络层，数据块被称为报文段或段。</li><li><strong>对失序数据包重新排序以及去重</strong>：TCP 为了保证不发生丢包，就给每个包一个序列号，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据就可以实现数据包去重。</li><li><strong>校验和</strong> : TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li><strong>超时重传</strong> : 当发送方发送数据之后，它启动一个定时器，等待目的端确认收到这个报文段。接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的往返时延（RTT）内未收到确认消息，那么对应的数据包就被假设为已丢失并进行重传。</li><li><strong>流量控制</strong> : TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。</li><li><strong>拥塞控制</strong> : 当网络拥塞时，减少数据的发送。</li></ol><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。<br>TCP协议会将待发送的数据拆分成数据包一个一个发送，并通过一个滑动窗口来控制发送的速率。这个窗口保证同一时刻内只有特定数量的数据包处于待发送状态，包含已经发送但未收到确认消息的数据包和即将发送的数据包。<br><img src="/images/18751695-00f04b283676a986.png" alt="发送窗口"><br><img src="/images/18751695-8af2fceefecfc006.png" alt="接受窗口"></p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><ul><li>流量控制是端到端的，而拥塞控制是全局性的，涉及到所有的路由器和网络。</li><li>TCP发送方会让自己的发送窗口取拥塞窗口和接收方接受窗口中较小的一个。</li><li>TCP的拥塞控制采取了四种算法，慢开始、拥塞避免、快重传和快恢复。</li></ul><h2 id="RPC（应用层）"><a href="#RPC（应用层）" class="headerlink" title="RPC（应用层）"></a>RPC（应用层）</h2><p>RPC(Remote Procedure Call）又叫做 远程过程调用，它本身并不是一个具体的协议，而是一种调用方式 。<br>不同的RPC实现要么直接基于TCP，要么基于HTTP协议，总之，都是应用层的协议。核心功能有：</p><ol><li>客户端：调用远程方法的一端</li><li>客户端Stub（桩）：代理类，将你调用方法，类，参数等信息传递到服务端</li><li>网络传输：将信息传输到服务端</li><li>服务端Stub（桩）：接受到请求后，指定对应的方法然后返回结果的类</li><li>服务端：提供远程方法的一端</li></ol><h3 id="Dubbo框架"><a href="#Dubbo框架" class="headerlink" title="Dubbo框架"></a>Dubbo框架</h3><p>Dubbo3提供了从服务定义、服务发现、服务通信到流量管控等几乎所有的服务治理能力，支持Triple协议（基于HTTP/2之上定义的下一代RPC通信协议）。</p><h3 id="gRPC框架"><a href="#gRPC框架" class="headerlink" title="gRPC框架"></a>gRPC框架</h3><p>Google开源的一个高性能、通用的开源RPC框架，基于HTTP/2协议设计，基于ProtoBuf序列化协议开发。</p><h3 id="HTTP协议和RPC的区别"><a href="#HTTP协议和RPC的区别" class="headerlink" title="HTTP协议和RPC的区别"></a>HTTP协议和RPC的区别</h3><ul><li>RPC是C/S架构，HTTP是B/S架构。RPC协议可能每家都不一样，而HTTP协议是一个通用的协议，是个浏览器就支持。</li><li>服务发现，HTTP通过DNS服务查找服务器的IP地址和端口，RPC协议使用专门的中间服务来获取IP地址和端口。</li><li>底层连接方式，HTTP协议再建立了底层TCP连接后一般会复用该连接，RPC协议会维护一个TCP连接池，用完再放回去，无太大区别。</li><li>传输内容，一般包含消息头和消息体。HTTP协议传输的内容以字符串或json格式为主，RPC可以使用Protobuf序列化格式保存二进制数据，信息密度更高。</li></ul><h4 id="Protobuf序列化协议"><a href="#Protobuf序列化协议" class="headerlink" title="Protobuf序列化协议"></a>Protobuf序列化协议</h4><p>采用Tag-Length-Value将每个字段编码成二进制数据，然后拼接成一个二进制字节流，信息密度十分紧凑。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
            <tag> HTTP </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下切换Jdk版本</title>
      <link href="/2023/02/05/ubuntu-xia-qie-huan-jdk-ban-ben/"/>
      <url>/2023/02/05/ubuntu-xia-qie-huan-jdk-ban-ben/</url>
      
        <content type="html"><![CDATA[<h3 id="Ubuntu-下载多个Openjdk并进行切换"><a href="#Ubuntu-下载多个Openjdk并进行切换" class="headerlink" title="Ubuntu 下载多个Openjdk并进行切换"></a>Ubuntu 下载多个<code>Openjdk</code>并进行切换</h3><p>安装<code>jdk</code>如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-17-jdk</code></pre><p>切换版本命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署nginx</title>
      <link href="/2023/02/03/docker-bu-shu-nginx/"/>
      <url>/2023/02/03/docker-bu-shu-nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class="language-none"><code class="language-none">docker pull nginx</code></pre><h3 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h3><pre class="language-none"><code class="language-none">user  nginx;worker_processes  auto;error_log  /var/log/nginx/error.log notice;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    # include /etc/nginx/conf.d/*.conf;    server {        listen       80;        listen  [::]:80;        server_name  localhost;        #access_log  /var/log/nginx/host.access.log  main;        location / {            root   /usr/share/nginx/html;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   /usr/share/nginx/html;        }        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #location ~ \.php$ {        #    proxy_pass   http://127.0.0.1;        #}        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #location ~ \.php$ {        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #}        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #location ~ /\.ht {        #    deny  all;        #}    }}</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><pre class="language-none"><code class="language-none">docker run -p 80:80 --name nginx \  -v /home/ubuntu/nginx/html/:/usr/share/nginx/html \  -v /home/ubuntu/nginx/logs/:/var/log/nginx \  -v /home/ubuntu/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \nginx</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>把<code>index.html</code>放到<code>/home/ubuntu/nginx/html/</code>目录下，然后访问<code>localhost</code>。</p><pre class="language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;Nginx test !!!&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;我的第一个标题&lt;/h1&gt;    &lt;p&gt;我的第一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="刷新nginx配置文件"><a href="#刷新nginx配置文件" class="headerlink" title="刷新nginx配置文件"></a>刷新nginx配置文件</h3><pre class="language-none"><code class="language-none">docker exec -it nginx /bin/bashnginx -s reload</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s上部署一个简单的springboot项目</title>
      <link href="/2023/02/01/zai-k8s-shang-bu-shu-yi-ge-jian-dan-de-springboot-xiang-mu/"/>
      <url>/2023/02/01/zai-k8s-shang-bu-shu-yi-ge-jian-dan-de-springboot-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="svc-yaml"><a href="#svc-yaml" class="headerlink" title="svc.yaml"></a>svc.yaml</h3><pre class="language-none"><code class="language-none">apiVersion: v1kind: Servicemetadata:  name: helloworld  labels:    app: helloworldspec:  type: NodePort  ports:  - port: 8080    targetPort: 8080    nodePort: 30080    protocol: TCP    name: web  selector:    app: helloworld</code></pre><h3 id="deploy-yaml"><a href="#deploy-yaml" class="headerlink" title="deploy.yaml"></a>deploy.yaml</h3><pre class="language-none"><code class="language-none">apiVersion: apps/v1kind: Deploymentmetadata:  name: helloworld-deployment  labels:    app: helloworldspec:  replicas: 3  selector:    matchLabels:      app: helloworld  template:    metadata:      labels:        app: helloworld    spec:      containers:      - name: helloworld        image: liyongweicn/helloworld_springboot:v2        ports:        - containerPort: 8080</code></pre><p>运行</p><pre class="language-none"><code class="language-none">kubectl apply -f svc.yamlkubectl apply -f deploy.yaml</code></pre><p>然后访问<code>&lt;节点的IP&gt;:30080/hello</code>即可。<br>通过查看Pod的log可以看到，每次访问通过轮询的方式实现了负载均衡。</p><pre class="language-none"><code class="language-none">kubectl logs helloworld-deployment-548748dcc5-98jn9</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker原理</title>
      <link href="/2023/01/24/docker-yuan-li/"/>
      <url>/2023/01/24/docker-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker技术原理"><a href="#Docker技术原理" class="headerlink" title="Docker技术原理"></a>Docker技术原理</h3><p>Docker实际上做了三件事：</p><ol><li>启用<code>Linux Namespace</code>配置；</li><li>设置指定的<code>Cgroups</code>参数；</li><li>切换进程的根目录<code>(change root)</code>。</li></ol><p>其中，第一步用于指定容器进程的<code>Namespace</code>，通过<code>clone()</code>命令中的<code>CLONE_NEWPID</code>参数指定该进程的<code>PID</code>，使得容器内的进程只能看到同一<code>Namespace</code>下的进程；<br>第二步，设置<code>Cgroups</code>用于限制进程组的硬件资源，使其只能使用宿主机的部分资源（例如只能使用50%的CPU）；<br>第三步，首先通过<code>clone()</code>命令中的<code>CLONE_NEWNS</code>参数设置<code>Mount Namespace</code>，然后使用<code>chroot</code>设置容器进程的根目录。</p><h3 id="Docker分层文件系统"><a href="#Docker分层文件系统" class="headerlink" title="Docker分层文件系统"></a>Docker分层文件系统</h3><p>以<code>Ubuntu</code>镜像为例，该镜像有五层，每层都是<code>Ubuntu</code>操作系统的一部分。<br>在使用镜像时，Docker会把这些增量联合挂载到一个统一的挂载点，在这个挂载点上，显示的就是一个完整的<code>Ubuntu</code>系统目录。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes命令备忘录</title>
      <link href="/2023/01/10/kubernetes-ming-ling-bei-wang-lu/"/>
      <url>/2023/01/10/kubernetes-ming-ling-bei-wang-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker相关"><a href="#Docker相关" class="headerlink" title="Docker相关"></a>Docker相关</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取代码</span><span class="token function">docker</span> pull<span class="token comment"># 登录Docker Hub</span><span class="token function">docker</span> login<span class="token comment"># Commit和Push</span><span class="token function">docker</span> commit haha<span class="token function">docker</span> push xxx/haha:v1<span class="token comment"># 创建容器并运行 </span><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">4000</span>:80 <span class="token parameter variable">--name</span> haha nginx:latest<span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> haha /bin/sh<span class="token comment"># 查看运行容器的进程Id</span><span class="token function">docker</span> <span class="token function">top</span> haha<span class="token comment"># 停止容器</span><span class="token function">docker</span> stop haha<span class="token comment"># 启动容器</span><span class="token function">docker</span> start haha<span class="token comment"># 容器镜像列表</span><span class="token function">docker</span> images<span class="token comment"># 容器运行列表</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token comment"># 删除镜像</span><span class="token function">docker</span> rmi image-name<span class="token comment"># 删除运行容器</span><span class="token function">docker</span> <span class="token function">rm</span> container-name</code></pre><h3 id="Kubectl相关"><a href="#Kubectl相关" class="headerlink" title="Kubectl相关"></a>Kubectl相关</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取列表</span>kubectl get pods/deployment/secrets/configmaps<span class="token comment"># 从文件新建或更新配置</span>kubectl apply <span class="token parameter variable">-f</span> xxx.yaml<span class="token comment"># 从文件删除配置</span>kubectl delete <span class="token parameter variable">-f</span> xxx.yaml<span class="token comment"># 进入pods</span>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> pod-name /bin/sh<span class="token comment"># 查看详情</span>kubectl describe pod/deployment name</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Pods</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">shareProcessNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> shell    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">stdin</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>Deployment</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/usr/share/nginx/html"</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>vol      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>vol        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2使用Windows代理</title>
      <link href="/2023/01/06/wsl2-shi-yong-windows-dai-li/"/>
      <url>/2023/01/06/wsl2-shi-yong-windows-dai-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.v2fy.com/p/2021-09-24-windows-clash-wsl2-1632440722000/">Windows 原生运行Linux如何自由访问互联网 WSL2 使用 Clash for Windows做代理 – V2方圆 (v2fy.com)</a></p></blockquote><pre class="language-none"><code class="language-none">hostip=$(cat /etc/resolv.conf |grep -oP '(?&lt;=nameserver\ ).*')alias setp='export https_proxy="http://${hostip}:7890";export http_proxy="http://${hostip}:7890";export all_proxy="socks5://${hostip}:7890";export ALL_PROXY="socks5://${hostip}:7890";'alias unsetp='unset https_proxy; unset http_proxy; unset all_proxy; unset ALL_PROXY;'</code></pre><p>使用时发现在执行<code>sudo</code>命令时，代理失效，这是因为代理配置只对当前用户生效，若想对root用户生效，需要切换到root用户，重新设置一下。</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity原理</title>
      <link href="/2022/12/04/springsecurity-yuan-li/"/>
      <url>/2022/12/04/springsecurity-yuan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringSecurity实际上是由一组Filter组成的过滤器链</p></blockquote><p><img src="https://docs.spring.io/spring-security/reference/_images/servlet/architecture/filterchain.png" alt="过滤器链"></p><h2 id="DelegatingFilterProxy"><a href="#DelegatingFilterProxy" class="headerlink" title="DelegatingFilterProxy"></a>DelegatingFilterProxy</h2><p>Spring提供了一个叫<a href="https://docs.spring.io/spring-framework/docs/6.0.0/javadoc-api/org/springframework/web/filter/DelegatingFilterProxy.html"><code>DelegatingFilterProxy</code></a>的<code>Filter</code>用来连接Spring的<code>ApplicationContext</code>和Servlet 容器。<br><img src="https://docs.spring.io/spring-security/reference/_images/servlet/architecture/delegatingfilterproxy.png" alt="DelegatingFilterProxy"></p><h2 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a>FilterChainProxy</h2><p>SpringSecurity提供的一个特殊的<code>Filter</code>，用于通过<a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-securityfilterchain"><code>SecurityFilterChain</code></a>管理一系列的<code>Filter</code>。<br>它是SpringSecurity一切服务的起点，可用于放置Debug断点。<br><img src="https://docs.spring.io/spring-security/reference/_images/servlet/architecture/filterchainproxy.png" alt="FilterChainProxy"></p><h2 id="SecurityFilterChain"><a href="#SecurityFilterChain" class="headerlink" title="SecurityFilterChain"></a>SecurityFilterChain</h2><p>SpringSecurity直接管理一组<code>Filter</code>。<br><img src="https://docs.spring.io/spring-security/reference/_images/servlet/architecture/securityfilterchain.png" alt="SecurityFilterChain"><br>可以有多个SecurityFilterChain，例如<br><img src="https://docs.spring.io/spring-security/reference/_images/servlet/architecture/multi-securityfilterchain.png" alt="SecurityFilterChain"></p><h2 id="Security-Filters"><a href="#Security-Filters" class="headerlink" title="Security Filters"></a>Security Filters</h2>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试PowerMockito使用心得</title>
      <link href="/2022/12/04/dan-yuan-ce-shi-powermockito-shi-yong-xin-de/"/>
      <url>/2022/12/04/dan-yuan-ce-shi-powermockito-shi-yong-xin-de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>测试类模板</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">PowerMockRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PrepareForTest</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">CollaboratorWithStaticMethods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollaboratorWithStaticMethodsTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFirstMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>静态方式调用当前类的其他静态方法时，如何写单元测试</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">forthMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">firstMethod</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"Good morning!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testForthMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">PowerMockito</span><span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token class-name">CollaboratorWithStaticMethods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PowerMockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token class-name">CollaboratorWithStaticMethods</span><span class="token punctuation">.</span><span class="token function">firstMethod</span><span class="token punctuation">(</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">CollaboratorWithStaticMethods</span><span class="token punctuation">.</span><span class="token function">forthMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"testGood morning!"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>进入异常catch语句块</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Junit </tag>
            
            <tag> PowerMockito </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot提示ActivitiProperties未找到</title>
      <link href="/2022/11/30/ti-shi-activitiproperties-wei-zhao-dao/"/>
      <url>/2022/11/30/ti-shi-activitiproperties-wei-zhao-dao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/skh2015java/article/details/120141409">ConfigurationProperties注解详解_思维的深度的博客-CSDN博客_configurationproperties注解</a></p></blockquote><p><code>ActivitiProperties</code>类中只有<code>@ConfigurationProperties</code>注解，这个注解需要搭配<code>@Configuration</code>注解使用，或者在启动类上添加<code>@EnableConfigurationProperties({ActivitiProperties.class})</code>注解。</p><p>折磨一天，还是对注解不够了解的锅。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot项目启动时创建数据库</title>
      <link href="/2022/11/14/springboot-xiang-mu-qi-dong-shi-chuang-jian-shu-ju-ku/"/>
      <url>/2022/11/14/springboot-xiang-mu-qi-dong-shi-chuang-jian-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基本思路是在项目启动后运行一个update语句，里面是建表语句。<br>在数据源设置allowMultiQueries=true允许多行sql语句执行。<br>这种方法有SQL注入的风险，建议实际项目中不要采用。</p></blockquote><p>首先创建一个初始化数据库的类，实现<code>CommandLineRunner</code>接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//order值越低，优先级越高</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitMySql</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">MySqlMapper</span> mySqlMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token comment">/**     * Callback used to run the bean.     *     * @param args incoming main method arguments     * @throws Exception on error     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始初始化数据库..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数据库初始化完毕!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 初始化表     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始创建表..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mySqlMapper<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"建表完毕!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 初始化数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始插入数据..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> userNum <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>userNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>userMapper<span class="token operator">::</span><span class="token function">insertList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数据插入完成!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在Mapper对应的xml文件中写入建表语句</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"createTable"</span><span class="token operator">&gt;</span>        drop table <span class="token keyword">if</span> exists user<span class="token punctuation">;</span>        create table user <span class="token punctuation">(</span>        id <span class="token keyword">int</span> auto_increment<span class="token punctuation">,</span>        primary <span class="token function">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">&gt;</span></code></pre><h2 id="最后，在application-yml中的数据库配置allowMultiQueries"><a href="#最后，在application-yml中的数据库配置allowMultiQueries" class="headerlink" title="最后，在application.yml中的数据库配置allowMultiQueries"></a>最后，在application.yml中的数据库配置allowMultiQueries</h2><pre class="language-none"><code class="language-none">url: jdbc:mysql://localhost:3306/user?serverTimezone=UTC&amp;allowMultiQueries=true</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Redis以及Lua脚本</title>
      <link href="/2022/11/14/springboot-zheng-he-redis-yi-ji-lua-jiao-ben/"/>
      <url>/2022/11/14/springboot-zheng-he-redis-yi-ji-lua-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>首先在<code>application.yml</code>中配置redis地址和端口号</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></code></pre><p>接着创建Redis和RedisScript配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">getStringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisScriptConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">defaultRedisScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> defaultRedisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultRedisScript<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"lua/redisScript.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultRedisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultRedisScript<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在方法中调用相应的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> redisController <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisScript<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"morning!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisKeys <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> redisKeys<span class="token punctuation">,</span> <span class="token string">"good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，RedisScriptConfig中的lua脚本内容为</p><pre class="language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">return</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">..</span>KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">..</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Redis </tag>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用工作流</title>
      <link href="/2022/11/05/git-chang-yong-gong-zuo-liu/"/>
      <url>/2022/11/05/git-chang-yong-gong-zuo-liu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一些概念<br>当使用git clone拉取代码后，本地会出现两种类型的分支，一种是以origin/开头的远程分支，一种是本地分支。<br>本地的远程分支仅用来存储远程代码仓库的代码，不能用来commit</p></blockquote><blockquote><p>本地代码有改动，想要拉取远程最新的代码时</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 将未提交成commit的所有改动存储至stash</span><span class="token function">git</span> stash save<span class="token comment"># 2. 仅拉取远程最新代码，不进行合并</span><span class="token function">git</span> fetch<span class="token comment"># 现在本地的所有origin/**分支均为最新状态</span><span class="token comment"># 3. 将origin分支的最新内容合并到当前分支</span><span class="token function">git</span> rebase origin/**<span class="token comment"># 4. 将存储在stash中的改动拿出来</span><span class="token function">git</span> stash pop<span class="token comment"># 现在可以继续工作了</span></code></pre><blockquote><p>创建并切换到新的分支，并设置跟踪远程某个分支<br>设置成跟踪之后，在新分支使用push会直接关联到远程分支</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首先暂存所有未commit的改动到stash</span><span class="token function">git</span> stash save<span class="token comment"># newBranchName为你想要创建的新分支名，origin/branchName为你想要跟踪的远程分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> newBranchName origin/branchName<span class="token comment"># 将stash中的改动拿出来</span><span class="token function">git</span> stash pop</code></pre><blockquote><p>合并多个commit，并修改commit信息</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 首先暂存所有未commit的改动到stash</span><span class="token function">git</span> stash save<span class="token comment"># 2. 假设要修改之前的四个提交记录，使用rebase -i来进行操作，此时会进入到一个文本编辑器中</span><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~4<span class="token comment"># 每个commit前的pick/fixup/reword等代表要对该commit进行的操作</span><span class="token comment"># 将第一个设置为pick，其余设置为fixup，代表使用第一个commit的提交信息，并把其他commit合并到这一个commit中</span><span class="token comment"># 保存后退出编辑器</span><span class="token comment"># 3. 开始修改提交信息，在弹出的文本编辑器中修改完成后保存退出即可</span><span class="token function">git</span> commit <span class="token parameter variable">--amend</span><span class="token comment"># 将stash中的改动拿出来</span><span class="token function">git</span> stash pop</code></pre><blockquote><p>将其他分支的某些commit拿过来用</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick commitID</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebClient进阶之合并多个Mono为一个Flux</title>
      <link href="/2022/09/24/webclient-jin-jie-zhi-he-bing-duo-ge-mono-wei-yi-ge-flux/"/>
      <url>/2022/09/24/webclient-jin-jie-zhi-he-bing-duo-ge-mono-wei-yi-ge-flux/</url>
      
        <content type="html"><![CDATA[<p>在项目中遇到一个问题，需要请求多个地址并将结果收集起来，借助WebClient实现了这个功能。<br>主要思路是通过WebClient创建多个<code>Mono</code>，然后通过<code>Flux.merge()</code>方法将<code>List&lt;Mono&lt;String&gt;&gt;</code>转化为<code>Mono&lt;List&lt;String&gt;&gt;</code>，然后调用<code>block()</code>请求全部完成。<br>首先编写WebClient配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebClientConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebClient</span> <span class="token function">webClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//配置固定大小连接池</span>        <span class="token class-name">ConnectionProvider</span> provider <span class="token operator">=</span> <span class="token class-name">ConnectionProvider</span>                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">"tax-core"</span><span class="token punctuation">)</span>                <span class="token comment">// 等待超时时间</span>                <span class="token punctuation">.</span><span class="token function">pendingAcquireTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 最大连接数</span>                <span class="token punctuation">.</span><span class="token function">maxConnections</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token comment">// 等待队列大小</span>                <span class="token punctuation">.</span><span class="token function">pendingAcquireMaxCount</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用Reactor</span>        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">clientConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReactorClientHttpConnector</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是测试类，两个Get映射，一个模拟网络接口，一个为测试。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">WebClient</span> webClient<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试合并多个结果     * @return      * @throws InterruptedException     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test/mono/merge"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">testMerge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Mono</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> monoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mono <span class="token operator">=</span> webClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/test/{num}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            monoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mono<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>monoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//阻塞当前线程直到所有请求完成</span>        <span class="token keyword">return</span> <span class="token keyword">return</span> flux<span class="token punctuation">.</span><span class="token function">collectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟网络响应     * @param i 参数     * @return 字符串     * @throws InterruptedException     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test/{i}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testMerge</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test is "</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>test is <span class="token number">1</span>, <span class="token builtin class-name">test</span> is <span class="token number">2</span>, <span class="token builtin class-name">test</span> is <span class="token number">3</span>, <span class="token builtin class-name">test</span> is <span class="token number">4</span>, <span class="token builtin class-name">test</span> is <span class="token number">0</span>, <span class="token builtin class-name">test</span> is <span class="token number">6</span>, <span class="token builtin class-name">test</span> is <span class="token number">7</span>, <span class="token builtin class-name">test</span> is <span class="token number">5</span>, <span class="token builtin class-name">test</span> is <span class="token number">9</span>, <span class="token builtin class-name">test</span> is <span class="token number">8</span>, <span class="token builtin class-name">test</span> is <span class="token number">10</span>, <span class="token builtin class-name">test</span> is <span class="token number">11</span>, <span class="token builtin class-name">test</span> is <span class="token number">12</span>, <span class="token builtin class-name">test</span> is <span class="token number">13</span>, <span class="token builtin class-name">test</span> is <span class="token number">14</span>, <span class="token builtin class-name">test</span> is <span class="token number">15</span>, <span class="token builtin class-name">test</span> is <span class="token number">16</span>, <span class="token builtin class-name">test</span> is <span class="token number">17</span>, <span class="token builtin class-name">test</span> is <span class="token number">18</span>, <span class="token builtin class-name">test</span> is <span class="token number">19</span>, <span class="token builtin class-name">test</span> is <span class="token number">23</span>, <span class="token builtin class-name">test</span> is <span class="token number">24</span>, <span class="token builtin class-name">test</span> is <span class="token number">20</span>, <span class="token builtin class-name">test</span> is <span class="token number">22</span>, <span class="token builtin class-name">test</span> is <span class="token number">21</span>, <span class="token builtin class-name">test</span> is <span class="token number">25</span>, <span class="token builtin class-name">test</span> is <span class="token number">29</span>, <span class="token builtin class-name">test</span> is <span class="token number">28</span>, <span class="token builtin class-name">test</span> is <span class="token number">26</span>, <span class="token builtin class-name">test</span> is <span class="token number">27</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebClient用法</title>
      <link href="/2022/09/24/webclient-yong-fa/"/>
      <url>/2022/09/24/webclient-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>WebClient是RestTemplete的替代品，有更好的响应式能力，支持异步调用，可以在Springboot项目中实现网络请求。<br><code>pom.xml</code>中添加以下依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>一个快速上手示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/data"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getDefaultDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方式一，直接调用create()方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mono <span class="token operator">=</span> webClient                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// GET 请求</span>                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/data"</span><span class="token punctuation">)</span>  <span class="token comment">// 请求路径</span>                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取响应体</span>                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//响应数据类型转换</span>        <span class="token keyword">return</span> <span class="token string">"from test1 "</span> <span class="token operator">+</span> mono<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方式二，调用builder()方法进行创建，可以自定义标头，基础链接</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">defaultHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">defaultCookie</span><span class="token punctuation">(</span><span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">,</span> <span class="token string">"test_token"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> mono <span class="token operator">=</span> webClient                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// GET 请求</span>                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/data"</span><span class="token punctuation">)</span>  <span class="token comment">// 请求路径</span>                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取响应体</span>                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//响应数据类型转换</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> mono<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"From test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//支持异步调用的方式</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">defaultHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">defaultCookie</span><span class="token punctuation">(</span><span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">,</span> <span class="token string">"test_token"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> mono <span class="token operator">=</span> webClient                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// GET 请求</span>                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/data"</span><span class="token punctuation">)</span>  <span class="token comment">// 请求路径</span>                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取响应体</span>                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//响应数据类型转换</span>        mono<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"正在进行网路请求。。。"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot异步任务调用</title>
      <link href="/2022/09/22/springboot-yi-bu-ren-wu-diao-yong/"/>
      <url>/2022/09/22/springboot-yi-bu-ren-wu-diao-yong/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot中使用<code>@EnableAsync</code>和<code>@Async</code>注解来实现异步任务功能，具体有如下三种方式，可自定义的程度依次递增。</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p><code>Application</code>启动类上加上<code>@EnableAsync</code>注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo_asynctask</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoAsynctaskApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoAsynctaskApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>异步方法上加上<code>@Async</code>注解（注意异步方法的调用方不可以和异步方法在同一个类中）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo_asynctask</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步任务一，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用方示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo_asynctask</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AsyncTask</span> asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用函数，执行耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问<code>http://localhost:8080/test</code>，控制台输出如下，证明调用方执行完毕时，异步任务仍在执行。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-4d1720738f1f6ae7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>直接在<code>Application</code>启动类上加<code>@EnableAsync</code>注解不优雅，并且我们可能想自定义线程池的一些属性，因此去掉启动类上的注解，添加如下配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>异步任务类和调用类保持原样，即</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步任务一，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AsyncTask</span> asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用函数，执行耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续访问<code>http://localhost:8080/test</code>，控制台输出如下，<br><img src="https://upload-images.jianshu.io/upload_images/18751695-61ee4d3dbfc780dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h2><p>有时候我们想在不同的场景中使用不同的线程池来执行异步任务，有些需要更多的核心线程，有些需要更多的队列容量，为此需要创建多个配置类，例如</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCustomConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"myAsyncExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">myAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后再异步任务的<code>@Aync</code>上指定线程池，即</p><pre class="language-none"><code class="language-none">@Componentpublic class AsyncTask {    @Async("myAsyncExecutor")    public void task1() throws InterruptedException {        Long beginTime = System.currentTimeMillis();        Thread.sleep(1000L);        Long endTime = System.currentTimeMillis();        System.out.println("异步任务一，耗时：" + (endTime - beginTime) + "ms.");    }}</code></pre><p>调用类保持不变</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AsyncTask</span> asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用函数，执行耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续访问<code>http://localhost:8080/test</code>，控制台输出如下，<br><img src="https://upload-images.jianshu.io/upload_images/18751695-f4258ebb10cb4b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vagrant快速部署多个虚拟机</title>
      <link href="/2022/06/06/vagrant-kuai-su-pei-zhi-duo-ge-xu-ni-ji-huan-jing/"/>
      <url>/2022/06/06/vagrant-kuai-su-pei-zhi-duo-ge-xu-ni-ji-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>Vagrant官网：<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a></p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ol><li>进入官网，点击<em><strong>Download</strong></em> 进入下载页，选择<em><strong>Windows</strong></em> 平台进行下载</li><li>点击运行安装包进行安装即可</li></ol><h2 id="二、添加中科大Centos7镜像box"><a href="#二、添加中科大Centos7镜像box" class="headerlink" title="二、添加中科大Centos7镜像box"></a>二、添加中科大Centos7镜像box</h2><ol><li>进入项目文件夹的命令行环境，输入<pre class="language-none"><code class="language-none">vagrant init centos7 https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/CentOS-7.box</code></pre></li><li>此时在项目文件夹内会创建一个<em><strong>Vagrantfile</strong></em> 配置文件,提供一个模板<pre class="language-none"><code class="language-none"># -*- mode: ruby -*-# vi: set ft=ruby :Vagrant.configure("2") do |config|  config.vm.box = "centos7"  config.vm.box_url = "https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/CentOS-7.box"  config.vm.provider "virtualbox" do |vb|    vb.memory = "2048"  end  (2..4).each do |i|    config.vm.define "hadoop10#{i}" do |node|      node.vm.network "private_network", ip: "192.168.56.10#{i}"      node.vm.hostname = "hadoop10#{i}"    end  endend</code></pre></li><li>在项目文件夹内运行<code>vagrant up</code>命令就会根据此配置文件创建虚拟机。</li></ol><h2 id="三、自定义Box以及Vagrantfile-配置文件"><a href="#三、自定义Box以及Vagrantfile-配置文件" class="headerlink" title="三、自定义Box以及Vagrantfile 配置文件"></a>三、自定义Box以及<em><strong>Vagrantfile</strong></em> 配置文件</h2><ol><li>首先需要在<em><strong>VirtualBox</strong></em> 中创建一个虚拟机，可以直接使用默认的<em><strong>Vagrantfile</strong></em> 创建</li><li>进入创建的虚拟机中，自定义设置以及安装的软件，然后准备打包</li><li>进入到<em><strong>VirtualBox</strong></em> 安装目录，运行以下命令获取虚拟机的<strong>名字</strong><pre class="language-none"><code class="language-none">./VBoxManage.exe list vms</code></pre></li><li><em><strong>Vagrant</strong></em> 打包命令为<pre class="language-none"><code class="language-none">vagrant package --helpUsage: vagrant package [options] [name|id]Options:        --base NAME                  Name of a VM in VirtualBox to package as a base box (VirtualBox Only)        --output NAME                Name of the file to output        --include FILE,FILE..        Comma separated additional files to package with the box        --info FILE                  Path to a custom info.json file containing additional box information        --vagrantfile FILE           Vagrantfile to package with the box        --[no-]color                 Enable or disable color output        --machine-readable           Enable machine readable output    -v, --version                    Display Vagrant version        --debug                      Enable debug output        --timestamp                  Enable timestamps on log output        --debug-timestamp            Enable debug output with timestamps        --no-tty                     Enable non-interactive output    -h, --help                       Print this help</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vagrant </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种Latex写作方式</title>
      <link href="/2022/05/04/dui-bi-ji-chong-guan-yu-latex-de-xie-zuo-fang-shi/"/>
      <url>/2022/05/04/dui-bi-ji-chong-guan-yu-latex-de-xie-zuo-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>现在编写 Latex 文件比较流行的方式主要有四种：</p><ol><li>在 Overleaf 上在线编辑</li><li>使用 TeXstudio + TeX Live 编辑</li><li>使用 VS Code + TeX Live + SumatraPDF 编辑</li><li>使用 CTex 套装编辑</li></ol><h2 id="在-Overleaf-上在线编辑"><a href="#在-Overleaf-上在线编辑" class="headerlink" title="在 Overleaf 上在线编辑"></a>在 Overleaf 上在线编辑</h2><p><img src="https://upload-images.jianshu.io/upload_images/18751695-8e80b05c4f613f32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="overleaf界面"></p><p>只需要注册一个 Overleaf 账号，就可以直接在浏览器上进行 Latex 写作。个人感觉是对于研究人员最好的方式，也是未来发展的趋势。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>云端同步，所有的文件都存储在服务器上，不用担心文件丢失</li><li>大家都是使用同一套编译和编辑环境，有什么问题可以很快找到解决方案</li><li>支持文件历史记录，对于版本迭代十分友好</li><li>支持多人协作</li><li>随时随地有个浏览器就可以开始写作</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>不支持多屏，无法将预览界面放到其他显示器上。目前有一个折中的方案，可以将两个显示器设为拼贴模式，然后调整编辑区和预览区，使预览区正好在第二个显示器上。但是我现在是笔记本带一个显示器，无法设置拼贴！并且Overleaf的预览区也不支持双页视图，即使拖到一个显示器上，效果也不怎么好。</li><li>参考文献数据库bib无法引用本地的文件，对于用JabRef管理参考文献的人不太友好。</li><li>对于使用 <code>\include{}</code> 和 <code>\input{}</code> 分割内容的文档，在编辑区无法识别目录，但是感觉无伤大雅，因为一般大家都是在预览区通过反向搜索快速跳转的</li></ol><h2 id="使用-TeXstudio-TeX-Live-编辑"><a href="#使用-TeXstudio-TeX-Live-编辑" class="headerlink" title="使用 TeXstudio + TeX Live 编辑"></a>使用 TeXstudio + TeX Live 编辑</h2><p><img src="https://upload-images.jianshu.io/upload_images/18751695-205a50018ba591b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="texsrudio界面"></p><p>这是比较传统的一种方式，需要用户自行安装 TeX Live 编译环境，然后在 TeXstudio 配置相关的编译命令。目前的处境有点尴尬，不太容易上手，也没有什么突出的优点。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>TeXstudio 提供了很多快捷操作以及 Latex 命令的提示，比如希腊字母，常用操作符的命令提示</li><li>对于从 CTex 套装过来的人们更亲切一点，操作界面很相似</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>白色页面对眼睛太不友好了，没有提供一个比较好的暗色主题</li><li>需要配置编译器以及默认的构建命令，对于小白有点难度</li></ol><h2 id="使用-VS-Code-TeX-Live-SumatraPDF-编辑"><a href="#使用-VS-Code-TeX-Live-SumatraPDF-编辑" class="headerlink" title="使用 VS Code + TeX Live + SumatraPDF 编辑"></a>使用 VS Code + TeX Live + SumatraPDF 编辑</h2><p><img src="https://upload-images.jianshu.io/upload_images/18751695-3a59e9da3d4927d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VS Code界面"><br><img src="https://upload-images.jianshu.io/upload_images/18751695-60ba410caedd09a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SumatraPDF界面"></p><p>自定义程度比较高的一种方式，使用三种软件协同工作</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li>VS Code 界面十分好看，用来写作对眼睛很友好</li><li>使用 SumatraPDF 进行预览，完美支持双屏显示器</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li>配置很麻烦，小白直接劝退，后期遇到问题的可能性有比较高</li></ol><h2 id="使用-CTex-套装编辑"><a href="#使用-CTex-套装编辑" class="headerlink" title="使用 CTex 套装编辑"></a>使用 CTex 套装编辑</h2><p><img src="https://upload-images.jianshu.io/upload_images/18751695-f77d2ef87176f847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CTex套装界面"></p><p>第一种解决 Latex 中文写作的方式，很古老，但是很稳定</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li>易上手，全程傻瓜式安装，无需考虑任何配置</li><li>模板巨多，基本从师兄师姐手里传下来的都是支持 CTex 套装的模板</li></ol><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol><li>默认使用<code>GB 2312</code>进行编码，而其余三种方式都是主流的<code>UTF-8</code>，导致很多人用其他编辑器打开在 CTex 套装中使用过的文件时显示乱码，直接劝退一大波小白使用新的方式进行 Latex 写作</li><li>安装时会删除系统环境变量中<code>Path</code>的全部内容，对其他软件例如Java，Matlab会产生严重干扰</li><li>实现中文写作的方式过于古老，编译速度较慢</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖Docker里的tmm怎么设置密码访问</title>
      <link href="/2022/04/30/qun-hui-docker-li-tmm-she-zhi-mi-ma/"/>
      <url>/2022/04/30/qun-hui-docker-li-tmm-she-zhi-mi-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用docker容器"><a href="#1-使用docker容器" class="headerlink" title="1. 使用docker容器"></a>1. 使用docker容器</h2><pre class="language-none"><code class="language-none">docker pull dzhuang/tinymediamanager</code></pre><h2 id="2-安装完成后，进入容器的终端机里，输入"><a href="#2-安装完成后，进入容器的终端机里，输入" class="headerlink" title="2. 安装完成后，进入容器的终端机里，输入"></a>2. 安装完成后，进入容器的终端机里，输入</h2><pre class="language-none"><code class="language-none">x11vnc -storepasswd</code></pre><p>设置密码，并确认密码保存位置，一般是</p><pre class="language-none"><code class="language-none">/root/.vnc/passwd</code></pre><h2 id="3-进入目录并编辑"><a href="#3-进入目录并编辑" class="headerlink" title="3. 进入目录并编辑"></a>3. 进入目录并编辑</h2><pre class="language-none"><code class="language-none">/run/s6/etc/services.d/x11vncvi run</code></pre><p>将<code>Handle the VNC password</code>中的路径修改为上述的密码保存路径，如下</p><pre class="language-none"><code class="language-none"># Handle the VNC password.                                                        if [ -f /root/.vnc/passwd ] &amp;&amp; [ -n "$( cat /root/.vnc/passwd )" ]; then              VNC_SECURITY="-rfbauth /root/.vnc/passwd"                                     else                                                                                  VNC_SECURITY="-nopw"                                                          fi </code></pre><h2 id="4-重启容器，最后结果"><a href="#4-重启容器，最后结果" class="headerlink" title="4. 重启容器，最后结果"></a>4. 重启容器，最后结果</h2><p><img src="https://upload-images.jianshu.io/upload_images/18751695-500b588cfe39697c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓动态DPI</title>
      <link href="/2022/04/01/an-zhuo-dong-tai-dpi/"/>
      <url>/2022/04/01/an-zhuo-dong-tai-dpi/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>##px<br>物理像素点,经常说的分辨率的单位就是px<br>##dpi<br>屏幕密度,即每英寸的像素个数,一英寸等于2.54厘米<br>$dpi = \frac{\sqrt{width^2+height^2}}{diagonal}$<br>其中$width,height$为屏幕的分辨率,单位为px;$diagonal$为屏幕对角线长度,单位为英寸</p><h2 id="density"><a href="#density" class="headerlink" title="density"></a>density</h2><p>屏幕密度比例,与标准屏幕(即dpi=160)的比例<br>$density = \frac{dpi}{160}$</p><h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h2><p>虚拟像素点<br>$dp = px*density = px * \frac{dpi}{160}$</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>只设计一份<code>dimens.xml</code>,不同机型通过调整缩放比例来保持一致<br>关键在于通过<code>context.getResources().getDisplayMetrics()</code>来获取设备<code>dpi</code>和<code>density</code>信息,<br>然后在<code>Application,activity</code>的<code>create()</code>的方法中设置这些信息,此外,当 <code>Activity</code>横屏旋转时,可以通过加入一个空白的<code>Fragment</code>来监听并更改<code>Activity</code>的屏幕密度.</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vendor和SSI分别是什么</title>
      <link href="/2022/03/24/vendor-he-ssi-fen-bie-shi-shi-me/"/>
      <url>/2022/03/24/vendor-he-ssi-fen-bie-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<p>个人理解，安卓系统分为Vendor和SSI两个部分，Vendor里封装了硬件的一些驱动，这些文件随着手机硬件的不同而有所改变，而SSI则偏向于软件层面，两个不同硬件的手机可以使用同一套SSI，例如小米手机有很多型号，但它们用的都是同一套SSI（不准确，大概理解就行）。</p><blockquote><p>SSI 是 OEM 通用的映像，可以存在于多个设备上。它不包含任何特定用于硬件或特定于产品的组件。根据定义，指定 SSI 中的所有内容都在使用该 SSI 的所有设备之间共享。SSI 可由单个 /system 映像组成，也可由 /system 和 /system_ext 分区组成，如图 1 所示。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-275fa8f0cf0e9c4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓异步消息处理机制</title>
      <link href="/2022/03/23/yi-bu-xiao-xi-chu-li-ji-zhi/"/>
      <url>/2022/03/23/yi-bu-xiao-xi-chu-li-ji-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Android中的异步消息处理主要由4个部分组成：Message、Handler、MessageQueue和Looper。</p></blockquote><blockquote><p>Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间传递数据。</p></blockquote><blockquote><p>Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的。发送消息一般是使用Handler的sendMessage()方法、post()方法等，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的handleMessage()方法中。</p></blockquote><blockquote><p>MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</p></blockquote><blockquote><p>Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入一个无限循环当中，然后每当发现MessageQueue中存在一条消息时，就会将它取出，并传递到Handler的handleMessage()方法中。每个线程中只会有一个Looper对象。</p></blockquote><h1 id="异步消息处理流程"><a href="#异步消息处理流程" class="headerlink" title="异步消息处理流程"></a>异步消息处理流程</h1><blockquote><p>首先需要在主线程当中创建一个<code>Handler</code>对象，并重写<code>handleMessage()</code>方法。然后当子线程中需要进行UI操作时，就创建一个<code>Message</code>对象，并通过Handler将这条消息发送出去。之后这条消息会被添加到<code>MessageQueue</code>的队列中等待被处理，而<code>Looper</code>则会一直尝试从<code>MessageQueue</code>中取出待处理消息，最后分发回<code>Handler</code>的<code>handleMessage()</code>方法中。由于<code>Handler</code>的构造函数中我们传入了<code>Looper.getMainLooper()</code>，所以此时<code>handleMessage()</code>方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行UI操作了。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-a04685d0260c7e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异步消息处理流程"></p></blockquote><h1 id="一些注意点"><a href="#一些注意点" class="headerlink" title="一些注意点"></a>一些注意点</h1><ol><li>每一个线程里可含有一个<code>Looper </code>对象以及一个<code>MessageQueue </code>数据结构。</li><li>当前线程的Handler只能处理当前线程里的<code>MessageQueue</code></li><li>子线程传递给主线程有两种方法，要么获取到主线程的<code>Looper</code>，要么获取到主线程的<code>Handler</code></li><li>主线程（UI线程）会自动创建一个<code>Looper</code>，在子线程中可以通过<code>Looper.getMainLoop()</code>来获取到</li><li>子线程中不会自动创建<code>Looper</code>，可以通过<code>Looper.prepare()</code>来创建，然后调用<code>Looper.loop()</code>进入循环</li><li>子线程中通过<code>Looper.myLooper()</code>来获取到本线程的<code>Looper</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lifecycle应用总结</title>
      <link href="/2022/03/23/lifecycles-ying-yong-zong-jie/"/>
      <url>/2022/03/23/lifecycles-ying-yong-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在编写Android应用程序的时候，可能会经常遇到需要感知Activity生命周期的情况。比如说，某个界面中发起了一条网络请求，但是当请求得到响应的时候，界面或许已经关闭了，这个时候就不应该继续对响应的结果进行处理。因此，我们需要能够时刻感知到Activity的生命周期，以便在适当的时候进行相应的逻辑控制。<br>问题在于，在一个Activity中去感知它的生命周期非常简单，而如果要在一个非Activity的类中去感知Activity的生命周期，应该怎么办呢？</p></blockquote><h1 id="最新-继承DefaultLifecycleObserver接口"><a href="#最新-继承DefaultLifecycleObserver接口" class="headerlink" title="(最新)继承DefaultLifecycleObserver接口"></a>(最新)继承DefaultLifecycleObserver接口</h1><p>Kotlin版本，继承<code>DefaultLifecycleObserver</code>接口，直接重写所需的方法，然后在被监听的<code>Activity</code>中添加<code>MyObserver</code>即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyObserver</span> <span class="token operator">:</span> <span class="token class-name">DefaultLifecycleObserver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> val <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">"MyObserver"</span>    override fun <span class="token function">onCreate</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on Create"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onDestroy</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on Destroy"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onStart</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on Start"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onResume</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on Resume"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onPause</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on Pause"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onStop</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on Stop"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token operator">:</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    override fun <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> <span class="token class-name">Bundle</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        lifecycle<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以在<code>MainActivity</code>中直接定义接口的抽象类</p><pre class="language-java" data-language="java"><code class="language-java">lifecycle<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>object <span class="token operator">:</span> <span class="token class-name">DefaultLifecycleObserver</span> <span class="token punctuation">{</span>    override fun <span class="token function">onCreate</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token class-name">LifecycleOwner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyObserver"</span><span class="token punctuation">,</span> <span class="token string">"on Created"</span><span class="token punctuation">)</span>        owner<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><em><strong>最后不要忘了移除掉添加的观察者</strong></em></p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><h3 id="自己手写监听器"><a href="#自己手写监听器" class="headerlink" title="自己手写监听器"></a>自己手写监听器</h3><p>首先自己手写一个简单的监听器</p><blockquote><p>可以看到，这里我们为了让MyObserver能够感知到Activity的生命周期，需要专门在<br>MainActivity中重写相应的生命周期方法，然后再通知给MyObserver。这种实现方式虽然是<br>可以正常工作的，但是不够优雅，需要在Activity中编写太多额外的逻辑。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyObserver</span> <span class="token punctuation">{</span>    fun <span class="token function">activityStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    fun <span class="token function">activityStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token operator">:</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lateinit <span class="token keyword">var</span> observer<span class="token operator">:</span> <span class="token class-name">MyObserver</span>    override fun <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> <span class="token class-name">Bundle</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observer <span class="token operator">=</span> <span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        observer<span class="token punctuation">.</span><span class="token function">activityStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        observer<span class="token punctuation">.</span><span class="token function">activityStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="借用注解"><a href="#借用注解" class="headerlink" title="借用注解"></a>借用注解</h3><p><a href="https://blog.csdn.net/vitaviva/article/details/121224946">https://blog.csdn.net/vitaviva/article/details/121224946</a><br>这里需要好好梳理一下。</p><blockquote><p>可以看到，我们在方法上使用了@OnLifecycleEvent注解，并传入了一种生命周期事件。生<br>命周期事件的类型一共有7种：ON_CREATE、ON_START、ON_RESUME、ON_PAUSE、<br>ON_STOP和ON_DESTROY分别匹配Activity中相应的生命周期回调；另外还有一种ON_ANY类<br>型，表示可以匹配Activity的任何生命周期回调。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">LifecycleObserver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_START</span><span class="token punctuation">)</span>    fun <span class="token function">activityStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyObserver"</span><span class="token punctuation">,</span> <span class="token string">"activityStart"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_STOP</span><span class="token punctuation">)</span>    fun <span class="token function">activityStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyObserver"</span><span class="token punctuation">,</span> <span class="token string">"activityStop"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token operator">:</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    override fun <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> <span class="token class-name">Bundle</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        lifecycle<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="Lifecycle继承图（Fragment）"><a href="#Lifecycle继承图（Fragment）" class="headerlink" title="Lifecycle继承图（Fragment）"></a>Lifecycle继承图（Fragment）</h3><blockquote><p><a href="https://blog.csdn.net/zhuzp_blog/article/details/78871374">https://blog.csdn.net/zhuzp_blog/article/details/78871374</a><br><img src="https://upload-images.jianshu.io/upload_images/18751695-8f36287a3f8beb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个实时响应Toast的工具类</title>
      <link href="/2022/03/22/yi-ge-shi-shi-xiang-ying-toast-de-gong-ju-lei/"/>
      <url>/2022/03/22/yi-ge-shi-shi-xiang-ying-toast-de-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<p>在安卓开发中，如果我们直接使用</p><pre class="language-none"><code class="language-none">Toast.makText(context, text, Toast.LENGTH_SHORT).show()</code></pre><p>来显示Toast消息的话，若用户在当前Toast还未结束时继续触发Toast提示，应用只能等当前Toast播放完毕才能播放下一条。如果用户多次点击Toast，那么Toast提示会一直弹出。</p><h3 id="ToastUtil"><a href="#ToastUtil" class="headerlink" title="ToastUtil"></a>ToastUtil</h3><p>思路：当有新的Toast时，调用当前Toast的<code>cancel()</code>方法来提前退出，然后生成新的Toast。<br>Java版本</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToastUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Toast</span> mToast <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token class-name">Context</span> mContext<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Toast</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mToast<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mToast <span class="token operator">=</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mToast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Kotlin版本 </p><pre class="language-java" data-language="java"><code class="language-java">object <span class="token class-name">ToastUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> mToast<span class="token operator">:</span> <span class="token class-name">Toast</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    fun <span class="token function">showToast</span><span class="token punctuation">(</span>mContext<span class="token operator">:</span> <span class="token class-name">Context</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mToast<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        mToast <span class="token operator">=</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span>        mToast<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓文件写入权限申请模板</title>
      <link href="/2022/03/18/an-zhuo-wen-jian-xie-ru-quan-xian-shen-qing-mo-ban/"/>
      <url>/2022/03/18/an-zhuo-wen-jian-xie-ru-quan-xian-shen-qing-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><pre class="language-none"><code class="language-none">&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;</code></pre><h3 id="MainActivity-kt"><a href="#MainActivity-kt" class="headerlink" title="MainActivity.kt"></a>MainActivity.kt</h3><pre class="language-none"><code class="language-none">class MainActivity : AppCompatActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        if (ContextCompat.checkSelfPermission(                this@MainActivity,                Manifest.permission.WRITE_EXTERNAL_STORAGE            ) != PackageManager.PERMISSION_GRANTED        ) {            ActivityCompat.requestPermissions(                this@MainActivity,                arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),                1            )        }    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array&lt;String?&gt;,        grantResults: IntArray    ) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        when (requestCode) {            1 -&gt; if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] != PackageManager.PERMISSION_GRANTED) {                Toast.makeText(this, "拒绝权限将无法使用程序", Toast.LENGTH_SHORT).show()                finish()            }            else -&gt; {}        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代码（第二版） 断点下载代码修正</title>
      <link href="/2022/03/14/2022-03-14/"/>
      <url>/2022/03/14/2022-03-14/</url>
      
        <content type="html"><![CDATA[<h3 id="ServiceBestPractice"><a href="#ServiceBestPractice" class="headerlink" title="ServiceBestPractice"></a>ServiceBestPractice</h3><p>第二版的代码需要修改两处，第一处位于<code>DownloadService.java</code>中的<code>getNotification()</code>方法</p><pre class="language-none"><code class="language-none">private Notification getNotification(String title, int progress) {        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) {            NotificationChannel channel = new NotificationChannel("download_service", "前台Service通知", NotificationManager.IMPORTANCE_DEFAULT);            manager.createNotificationChannel(channel);        }        Intent intent = new Intent(this, MainActivity.class);        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0);        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, "download_service");        builder.setSmallIcon(R.mipmap.ic_launcher);        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));        builder.setContentIntent(pi);        builder.setContentTitle(title);        if (progress &gt; 0) {            // 当progress 大于或等于0时才需要显示下载进度            builder.setContentText(progress + "%");            builder.setProgress(100, progress, false);        }        return builder.build();    }</code></pre><p>第二处是权限声明，位于<code>AndroidManifest.xml</code>中，加入这一行</p><pre class="language-none"><code class="language-none">&lt;uses-permission android:name="android.permission.FOREGROUND_SERVICE" /&gt;</code></pre><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><ol><li>调用<code>MainActivity</code>的<code>onCreate()</code>方法，绑定布局以及按钮，按钮开始监听点击事件，绑定<code>DownloadService</code>服务</li><li>绑定<code>DownloadService</code>服务时，会调用<code>onBind()</code>方法，返回一个绑定器实例<code>downloadBinder</code></li><li><code>MainActicity</code>的<code>ServiceConnection</code>会在服务可连接时调用<code>onServiceConnected</code>获取到<code>downloadBinder</code>实例</li><li>监视到点击事件的时候，  会设置下载地址<code>url</code>并且调用<code>downloadBinder</code>的<code>startDownload(url)</code>方法</li><li><code>startDownload</code>方法中新建<code>downloadTask</code>实例并执行，然后在前台通知正在下载，Toast同步推送“正在下载”的消息</li><li><code>downloadTask</code>执行<code>doInBackground()</code>方法开始下载</li></ol><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ol><li>断点下载的代码粗心写错了，导致无法断点下载。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改项目的Java版本</title>
      <link href="/2022/03/11/2022-03-11/"/>
      <url>/2022/03/11/2022-03-11/</url>
      
        <content type="html"><![CDATA[<h3 id="更改项目的Java版本"><a href="#更改项目的Java版本" class="headerlink" title="更改项目的Java版本"></a>更改项目的Java版本</h3><p>打开<code>app</code>目录下的<code>build.gradle</code>，更改<code>compileOptions</code>中的内容，例如</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion.VERSION_17        targetCompatibility JavaVersion.VERSION_17<span class="token punctuation">}</span></code></pre><p>然后点击<code>Sync now</code>进行同步</p><h3 id="设置项目最低支持的API"><a href="#设置项目最低支持的API" class="headerlink" title="设置项目最低支持的API"></a>设置项目最低支持的API</h3><p>假如要使用<code>API 30</code>引进的新特性，那么项目的<code>minSdk</code>也至少为<code>30</code>，在<code>app</code>目录下的<code>build.gradle</code>中修改。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓入门第六天</title>
      <link href="/2022/03/09/ru-men-di-liu-tian/"/>
      <url>/2022/03/09/ru-men-di-liu-tian/</url>
      
        <content type="html"><![CDATA[<h3 id="广播最佳实践"><a href="#广播最佳实践" class="headerlink" title="广播最佳实践"></a>广播最佳实践</h3><p>写了一个<code>BaseActivity</code>类，在里边实现了动态注册广播接受器，结果最后忘记让所有的活动界面继承这个类，找了半天找不到问题，太粗心了。</p><h5 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h5><p><code>sendBoradcast(intent)</code></p><h5 id="动态注册广播接收器"><a href="#动态注册广播接收器" class="headerlink" title="动态注册广播接收器"></a>动态注册广播接收器</h5><pre class="language-none"><code class="language-none">IntentFilter intentFilter = new IntentFilter();intentFilter.addAction("com.example.broadcastbestpractice.FORCE_OFFLINE");receiver = new ForceOffLineReceiver();registerReceiver(receiver, intentFilter);</code></pre><h3 id="文件持久化"><a href="#文件持久化" class="headerlink" title="文件持久化"></a>文件持久化</h3><h5 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h5><p><code>openFileOutput("file name", Context.MODE_PRIVATE/Context.MODE_APPEND)</code>返回一个<code>FileOutputStream</code>对象</p><h5 id="SharedPreferences存储（键值对存储）"><a href="#SharedPreferences存储（键值对存储）" class="headerlink" title="SharedPreferences存储（键值对存储）"></a>SharedPreferences存储（键值对存储）</h5><p><code>getSharedPreferences()</code>方法</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓入门第五天</title>
      <link href="/2022/03/08/ru-men-di-wu-tian/"/>
      <url>/2022/03/08/ru-men-di-wu-tian/</url>
      
        <content type="html"><![CDATA[<h2 id="广播接收器"><a href="#广播接收器" class="headerlink" title="广播接收器"></a>广播接收器</h2><p>分为动态广播器和静态广播器，静态广播器只能接受显式广播</p><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>分为标准广播和有序广播，标准广播使得所有的广播接收器同时收到广播消息，有序广播同一时刻只有一个广播接收器能够收到消息</p><p>因为疫情，摸鱼一天</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓入门第四天</title>
      <link href="/2022/03/07/ru-men-di-si-tian/"/>
      <url>/2022/03/07/ru-men-di-si-tian/</url>
      
        <content type="html"><![CDATA[<h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><p>碎片总是依附于活动而存在的，可以在活动中随时动态添加<br><img src="https://upload-images.jianshu.io/upload_images/18751695-b360e60372684563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><code>onAttah()</code>当碎片与活动建立关联的时候调用<br><code>onCreateView</code>为碎片创建视图（加载布局）时调用<br><code>onActivityView</code>确保与碎片相关联的活动一定已经创建完毕的时候调用<br><code>onDestroyView</code>当与碎片关联的视图被移除的时候调用<br><code>onDetach</code>当碎片和活动解除关联的时候调用</p><h3 id="碎片的最佳实践"><a href="#碎片的最佳实践" class="headerlink" title="碎片的最佳实践"></a>碎片的最佳实践</h3><ol><li>新闻实体类<code>News</code></li><li>新闻内容碎片布局文件<code>news_content_frag.xml</code>，线性垂直布局，包含标题<code>news_title</code>，内容<code>news_content</code></li><li>新闻内容碎片类<code>NewsContentFragment</code>，私有属性<code>view</code>，链接到新闻内容碎片布局文件<code>news_content_frag.xml</code>，提供一个刷新函数<code>refresh</code>，刷新标题和内容</li><li>新闻内容活动类<code>NewsContentActivity</code>，绑定到<code>news_content.xml</code>新闻内容布局文件，布局中直接引用新闻内容碎片类布局<code>news_content_frag.xml</code></li><li>新闻内容活动类提供<code>actionStart</code>函数和<code>onCreate</code>函数，<code>actionStart</code>中传入标题内容，<code>onCreate</code>中获取到标题内容然后进行显示</li><li>新闻列表碎片布局<code>news_title_frag.xml</code>，使用<code>recycleView</code>用于显示新闻标题列表</li><li>新闻标题项布局<code>news_item.xml</code>，显示新闻标题</li><li>新闻列表碎片类<code>NewsTitleFragment</code>，私有属性<code>isTwoPane</code>，绑定到<code>news_title_frag.xml</code>布局</li><li>分别新建<code>/layout/activity_main.xml</code>和<code>/layout-sw600dp/activity_main.xml</code>，分别用于单页和双页布局</li><li>修改新闻列表碎片类<code>NewsTitleFragment</code>，添加<code>NewsAdapter</code>作为<code>RecyclerView</code>的适配器，注册点击事件</li></ol><h3 id="动态注册广播"><a href="#动态注册广播" class="headerlink" title="动态注册广播"></a>动态注册广播</h3><ol><li>继承<code>BroadcastReceiver</code>类，并实现<code>onReceive</code>方法</li><li>新建<code>IntentFilter</code>对象，并添加<code>action</code>，即想要接受的广播类型</li><li>使用<code>registerReceiver</code>注册广播，在<code>onDestroy()</code>中取消注册广播</li></ol><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><img src="https://upload-images.jianshu.io/upload_images/18751695-d9a1d9d8d399ac2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基本步骤"></p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓入门第三天</title>
      <link href="/2022/03/06/ru-men-di-san-tian/"/>
      <url>/2022/03/06/ru-men-di-san-tian/</url>
      
        <content type="html"><![CDATA[<p>早上临时换了一个公交，然后公交临时绕过了西二旗，越走越远！悲剧的一天！</p><h3 id="编写界面的最佳实践（聊天窗口）"><a href="#编写界面的最佳实践（聊天窗口）" class="headerlink" title="编写界面的最佳实践（聊天窗口）"></a>编写界面的最佳实践（聊天窗口）</h3><ol><li>首先编写主界面的xml布局文件，包含一个消息列表框，文字编辑框和发送按钮</li><li>定义消息的实体类，包含两条属性：消息内容和消息类型（发送和接收）</li><li>编写消息列表框子项的xml布局文件，包含一个发送消息布局和一个接受消息布局，使用时隐藏其中一个即可</li><li>创建消息列表框的适配器类，用于接受消息实例并与消息的布局文件链接</li><li>编写主界面布局的主活动</li></ol><h3 id="Android-Studio连接物理机"><a href="#Android-Studio连接物理机" class="headerlink" title="Android Studio连接物理机"></a>Android Studio连接物理机</h3><p><a href="https://developer.android.com/studio/run/device#setting-up">https://developer.android.com/studio/run/device#setting-up</a></p><h3 id="线刷机步骤"><a href="#线刷机步骤" class="headerlink" title="线刷机步骤"></a>线刷机步骤</h3><ol><li>使用USB与手机连接，手机开启USB调试，电脑上安装adb，然后就自动连接了。查看连接的设备列表<code>adb devices</code></li><li>获取root权限<code>adb root</code>，重新挂载System分区<code>adb remount</code></li><li>手机进入Fastboot模式<code>adb reboot bootloader</code>，电脑上要安装fastboot</li><li>查看产品名称<code>fastboot getvar product</code>，查看是否解锁<code>fastboot oem device-info</code></li><li>根据产品名称找到对应的ROM包，然后解压</li><li>进入解压目录，执行刷机脚本<code>sudo ./flash_all.sh</code>进行刷机，刷完机会自动重启</li><li>（可选）跳过谷歌开机验证<code>adb shell settings put global device_provisioned 1</code></li></ol><h3 id="编译部分源码"><a href="#编译部分源码" class="headerlink" title="编译部分源码"></a>编译部分源码</h3><ol><li>下载源码，然后在Android Studio中进行编译</li><li>将安装包push到手机里，然后杀死对应的应用进程</li><li>重启，检查是否安装进去了</li></ol><h3 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h3><p><code>git branch</code> 查看当前分支<br><code>git checkout branchname</code> 切换分支<br><code>git fetch</code> 拉取最新代码但不合并</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓入门第二天</title>
      <link href="/2022/03/04/ru-men-di-er-tian/"/>
      <url>/2022/03/04/ru-men-di-er-tian/</url>
      
        <content type="html"><![CDATA[<h3 id="解决Android-Studio中文输入异常的情况"><a href="#解决Android-Studio中文输入异常的情况" class="headerlink" title="解决Android Studio中文输入异常的情况"></a>解决Android Studio中文输入异常的情况</h3><ol><li>搜索得到答案，需要在Android Studio安装目录下的/bin/studio.sh中第一行加入如下的代码<pre class="language-none"><code class="language-none">export XMODIFIERS="@im=fcitx"export GTK_IM_MODULE="fcitx"export QT_IM_MODULE="fcitx"</code></pre></li><li>发现自己使用snap安装的Android Studio，这使得安装目录是只读文件系统，无法修改配置文件</li><li>卸载后使用Android Studio官网推荐的方法来安装</li><li>安装后发现搜狗候选框还是在左下角，没有跟随光标，折腾了个寂寞</li><li>删除掉自己安装的，重新使用snap安装，然后在搜狗输入法里设置候选框不跟随光标，凑合用吧<pre class="language-none"><code class="language-none">sudo snap install android-studio --classic</code></pre></li></ol><h3 id="UI控件"><a href="#UI控件" class="headerlink" title="UI控件"></a>UI控件</h3><p>TextView-文本信息显示<br>Button-按钮<br>EditText-文本输入编辑<br>ImageView-图像显示<br>ProgressBar-进度条<br>AlertDialog-消息确认框，可以屏蔽掉其他控件的交互<br>ProgressDialog-进度条对话框，可以屏蔽掉其他控件的交互</p><h3 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h3><ol><li>线性布局LinearLayout<br>layout_gravity可以设置控件在布局中的对齐位置<br>layout_weight可以设置控件在布局中的比例</li><li>相对布局RelativeLayout<br>layout_alignParentLeft设置相对于父布局左对齐<br>layout_ablve设置在哪一个控件的上方<br>layout_toRightOf设置在哪一个控件的右方</li><li>帧布局FrameLayout<br>控件都位于布局左上角相同的位置，一层一层叠加上去</li></ol><h3 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h3><ol><li>创建xml布局文件</li><li>创建这个布局的java类，继承一般的布局</li><li>在待使用的xml布局中按照一般控件的使用方法来调用它</li></ol><h3 id="定制ListView"><a href="#定制ListView" class="headerlink" title="定制ListView"></a>定制ListView</h3><ol><li>创建列表元素的实体类</li><li>创建列表元素的xml布局</li><li>创建自定义的适配器</li><li>在Mainactivity中传入数据</li></ol><h3 id="RecycleView的使用"><a href="#RecycleView的使用" class="headerlink" title="RecycleView的使用"></a>RecycleView的使用</h3><ol><li>首先需要在<code>app:build.gradle</code>中添加recycleview的依赖</li><li>在页面布局文件中添加recycleview控件</li><li>设置元素的实体类和布局文件</li><li>准备元素的适配器</li><li>主活动中初始化数据并传入recycleView中</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓入门第一天</title>
      <link href="/2022/03/02/ru-men-di-yi-tian/"/>
      <url>/2022/03/02/ru-men-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<h3 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h3><p>活动（Activity），服务（Service），广播接受器（Broadcast Receiver），内容提供器（Content Provider）</p><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><p>整个Android项目的配置文件，程序中的四大组件都需要在这里注册，还可以添加应用程序的权限声明</p><h3 id="HelloWorld程序流程"><a href="#HelloWorld程序流程" class="headerlink" title="HelloWorld程序流程"></a>HelloWorld程序流程</h3><ol><li>AndroidManifest.xml文件中注册了HelloWorldActivity活动</li><li>HelloWorldActivity中调用onCreate()方法</li><li>onCreate()方法读取xml界面文件</li></ol><h3 id="res目录"><a href="#res目录" class="headerlink" title="res目录"></a>res目录</h3><p>存储图片（drawable开头），应用图标（mipmap开头），字符串、样式、颜色等配置（values开头），布局文件（layout开头）<br>在代码中通过R.string.hello_world获得字符串的引用<br>在XML中通过@String/hello_world获得字符串的引用</p><h3 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h3><p>Android系统提供的一种提醒方式，可以将一些短小的信息通知给用户</p><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>是Android程序中各组件之间进行交互的一种重要方式，不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。Intent分为显式Intent和隐式Intent。</p><h3 id=""><a href="#" class="headerlink" title=""></a><intent-filter></intent-filter></h3><p>可以制定当前活动可以响应的action和category。</p><h3 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h3><p>Android用任务来管理活动，一个任务（Task）就是一组存放在栈里的活动的集合。<br>活动分为运行状态，暂停状态，停止状态，销毁状态。<br>完整生存期（onCreate()和onDestroy()方法之间）<br>可见生存期（onStart()和onStop()方法之间）<br>前台生存期（onResume()和onPause()方法之间）<br><img src="https://upload-images.jianshu.io/upload_images/18751695-a0cfbad7a9c6ae55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>在AndroidManifest.xml中给<activity>标签指定<a href="android:launchMode">android:launchMode</a>属性<br>standard，默认模式，每次启动都会创建一个实例<br>singleTop，若栈顶已经是该活动，则不创建新的实例<br>singleTask，启动前会检查栈中是否有该活动，若有，则令其之上的活动全部出栈<br>singleInstance，启动一个新的返回栈来管理该活动</activity></p><h3 id="如何寻找界面所属的活动"><a href="#如何寻找界面所属的活动" class="headerlink" title="如何寻找界面所属的活动"></a>如何寻找界面所属的活动</h3><p>可以创建一个BaseActivity，然后在它的onResume()方法中打印类名，最后让所有的Activity类都继承这个类。</p><h3 id="随时随地退出程序"><a href="#随时随地退出程序" class="headerlink" title="随时随地退出程序"></a>随时随地退出程序</h3><p>可以新建一个集合工具类用于存储所有的活动，若退出时，循环结束活动</p><h3 id="启动活动的最佳写法"><a href="#启动活动的最佳写法" class="headerlink" title="启动活动的最佳写法"></a>启动活动的最佳写法</h3><p>被启动的活动创建一个actionStart()方法，让其他活动调用这个方法来启动该活动。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试常见报错</title>
      <link href="/2021/12/20/dan-yuan-ce-shi-chang-jian-bao-cuo/"/>
      <url>/2021/12/20/dan-yuan-ce-shi-chang-jian-bao-cuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>找不到Slf4j的报错</p></blockquote><p>解决办法：在测试类上添加<code>@MockPolicy(Slf4jMockPolicy.class)</code></p><blockquote><p>lodaer constraint violation</p></blockquote><p>解决办法：在测试类上添加<code>@PowerMockIgnore("javax.management.**")</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PowerMockito </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SumatraPDF护眼绿配色</title>
      <link href="/2021/11/16/sumatrapdf-hu-yan-lu-pei-se/"/>
      <url>/2021/11/16/sumatrapdf-hu-yan-lu-pei-se/</url>
      
        <content type="html"><![CDATA[<p>##设置步骤</p><ol><li>点击SumatraPDF设置-&gt;高级选项，会打开一个文本</li><li>在里面找到<em><strong>FixedPageUI</strong></em> 里的<em><strong>BackgroundColor</strong></em>，修改为<pre class="language-conf" data-language="conf"><code class="language-conf">FixedPageUI [TextColor = #000000BackgroundColor = #d2e3c7SelectionColor = #f5fc0cWindowMargin = 2 4 2 4PageSpacing = 4 4HideScrollbars = false]</code></pre></li><li>保存后重启SumatraPDF。</li></ol><p>##效果展示<br><img src="https://upload-images.jianshu.io/upload_images/18751695-166a41d5050929f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑软件 </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决SumatraPDF-在VS-Code上反向搜索失效</title>
      <link href="/2021/11/13/jie-jue-sumatrapdf-zai-vs-code-shang-fan-xiang-sou-suo-shi-xiao/"/>
      <url>/2021/11/13/jie-jue-sumatrapdf-zai-vs-code-shang-fan-xiang-sou-suo-shi-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用 VS Code + SumatraPDF 进行 Latex 写作时，经常会遇到在 SumatraPDF 上反向搜索失效，或者在 VS Code 中打开了 <code>cli.js</code> 文件的场景</p><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><ol><li>发现独立打开 SumatraPDF 时可以反向搜索，然后进一步搜索后，了解到从VS Code中直接打开 SumatraPDF 时调用的是 VS Code 的子线程，这才导致无法反向搜索</li><li>通过阅读 SumatraPDF 官方文档，发现在命令行设置反向搜索和在图形界面设置是等价的，因此在 VS Code 配置里写入反向搜索命令没有必要</li><li>网上搜到在反向搜索命令参数中添加<code>cli.js</code>可以解决子线程无法调用的问题，尝试后发现无效</li></ol><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>有一点瑕疵，在写作前必须独立打开 SumatraPDF 阅读器，然后再打开 VS Code 进行写作。<br>在 VS Code 中去掉反向搜索配置，如下</p><pre class="language-conf" data-language="conf"><code class="language-conf">"latex-workshop.view.pdf.viewer": "external","latex-workshop.view.pdf.external.viewer.command": "&lt;SumatraPDF安装目录&gt;/SumatraPDF.exe","latex-workshop.view.pdf.external.viewer.args": [    "%PDF%"],"latex-workshop.view.pdf.external.synctex.command": "&lt;SumatraPDF安装目录&gt;/SumatraPDF.exe","latex-workshop.view.pdf.external.synctex.args": [    "-forward-search",    "%TEX%",    "%LINE%",    "-reuse-instance",    "%PDF%"],</code></pre><p>注意到配置中没有任何反向搜索命令，只定义了外部阅读器路径和正向搜索。<br>然后在SumatraPDF阅读器界面修改设置高级选项里的反向搜索命令行如下</p><pre class="language-bat" data-language="bat"><code class="language-bat">"C:\Program Files\Microsoft VS Code\Code.exe"  -r -g "%f":"%l"</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑软件 </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的安装与配置</title>
      <link href="/2021/11/06/maven-de-an-zhuang-yu-pei-zhi/"/>
      <url>/2021/11/06/maven-de-an-zhuang-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>Maven官网地址为：<a href="https://maven.apache.org/">https://maven.apache.org</a></p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ol><li>进入到官网，然后找到<em><strong>Download</strong></em> 字段，点击进入下载界面</li><li>找到<em><strong>Binary zip archive</strong></em> 类型的<em><strong>zip</strong></em> 压缩包，点击下载</li><li>选择安装位置，然后将压缩包解压</li><li>进入环境变量设置界面，添加两个系统变量值如下：<pre class="language-bash" data-language="bash"><code class="language-bash">MAVEN_HOMEM2_HOME<span class="token comment"># 两个变量的值均为Maven安装位置，例如：D:\maven\apache-maven-3.3.9</span></code></pre></li><li>在系统变量<em><strong>Path</strong></em> 中添加两个值如下：<pre class="language-none"><code class="language-none">%MAVEN_HOME%\bin%M2_HOME%\bin</code></pre></li><li>进入<em><strong>cmd</strong></em> 界面，输入<code>mvn -version</code>测试。</li></ol><h2 id="二、配置本地仓库和阿里云源"><a href="#二、配置本地仓库和阿里云源" class="headerlink" title="二、配置本地仓库和阿里云源"></a>二、配置本地仓库和阿里云源</h2><ol><li>进入到Maven安装目录，打开<em><strong>conf</strong></em> 目录下的<em><strong>settings.xml</strong></em> 文件</li><li>找到<em><strong>localRepository</strong></em> 属性，在其下方添加自定义的本地仓库地址，例如：<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\Maven\repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span></code></pre></li><li>找到<em><strong>mirrors</strong></em> 属性，添加阿里云的镜像地址，如：<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span></code></pre></li><li>保存后退出</li></ol><h2 id="三、设置IDEA使用自己安装的Maven"><a href="#三、设置IDEA使用自己安装的Maven" class="headerlink" title="三、设置IDEA使用自己安装的Maven"></a>三、设置IDEA使用自己安装的Maven</h2><ol><li>仅限于IDEA2020.3版本</li><li>打开IDEA，若已经打开项目，在<em><strong>file</strong></em> 菜单下点击<em><strong>close Projects</strong></em> 进入到初始界面</li><li>点击打开<em><strong>Customize</strong></em> 下的<em><strong>All settings</strong></em>，依次找到<em><strong>Build，Execution，Deployment</strong></em> &gt;&gt;&gt;<em><strong>Build Tools</strong></em> &gt;&gt;&gt;<em><strong>Maven</strong></em> </li><li>设置<em><strong>Maven home path</strong></em> 为Maven的安装路径</li><li>在最后两条属性<em><strong>User settings file</strong></em> 和<em><strong>Local repository</strong></em> 后面都勾选<em><strong>Override</strong></em>，然后修改为自己的路径。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装并配置TeXstudio</title>
      <link href="/2021/11/05/windows-an-zhuang-bing-pei-zhi-texstudio/"/>
      <url>/2021/11/05/windows-an-zhuang-bing-pei-zhi-texstudio/</url>
      
        <content type="html"><![CDATA[<p>TeXstudio官网：<a href="https://www.texstudio.org/">https://www.texstudio.org/</a></p><h2 id="第一步、安装"><a href="#第一步、安装" class="headerlink" title="第一步、安装"></a>第一步、安装</h2><ol><li>进入官网，点击<em><strong>Download now</strong></em>进行下载<br><img src="https://upload-images.jianshu.io/upload_images/18751695-f766279d7c1e88c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>运行安装包进行安装即可。</li></ol><h2 id="第二步、配置"><a href="#第二步、配置" class="headerlink" title="第二步、配置"></a>第二步、配置</h2><ol><li><h5 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h5><ol><li>点击菜单栏的<em><strong>Options</strong></em>选项下的<em><strong>Configure TeXstudio</strong></em>进入到设置界面，</li><li>在<em><strong>General</strong></em>界面的<em><strong>Apperance</strong></em>部分找到<em><strong>Language</strong></em>设置即可。<br>   <img src="https://upload-images.jianshu.io/upload_images/18751695-e646ab1e0264732f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ol></li><li><h5 id="设置编译"><a href="#设置编译" class="headerlink" title="设置编译"></a>设置编译</h5><ol><li>在设置界面的<strong>命令</strong>子界面找到<em><strong>Latexmk</strong></em>命令，修改命令为<br><code>latexmk.exe -xelatex -silent -synctex=1 %</code><br>   <img src="https://upload-images.jianshu.io/upload_images/18751695-5ba750fe8b32da08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>在<strong>构建</strong>子界面设置<em><strong>默认编译器</strong></em> 为 <em><strong>Latexmk</strong></em>，设置方法为点击后边的扳手图标，然后删除掉默认的，将<em><strong>Latexmk</strong></em>添加进去即可。<br>   <img src="https://upload-images.jianshu.io/upload_images/18751695-6c358b6bf586c875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ol></li></ol><h2 id="第三步、测试"><a href="#第三步、测试" class="headerlink" title="第三步、测试"></a>第三步、测试</h2><ol><li>新建文件，内容如下<pre class="language-none"><code class="language-none">\documentclass{article}\begin{document}Hello World!\end{document}</code></pre></li><li>保存文件后，按<strong>F5</strong>键或者点击工具栏的<em><strong>绿色双重三角形箭头</strong></em>，等待编译完成<br> <img src="https://upload-images.jianshu.io/upload_images/18751695-14883fb32f590bf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>默认在编辑器右侧会出现一个<em><strong>PDF内嵌阅读器</strong></em> 界面，也可以点击工具栏的<em><strong>在纸上有一个放大镜</strong></em> 的图标进行查看<br>   <img src="https://upload-images.jianshu.io/upload_images/18751695-ff623eb2102eb351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑软件 </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JabRef文献管理软件使用教程</title>
      <link href="/2021/11/05/jabref-wen-xian-guan-li-ruan-jian-shi-yong-jiao-cheng/"/>
      <url>/2021/11/05/jabref-wen-xian-guan-li-ruan-jian-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>JabRef官网地址为：<a href="https://www.jabref.org/">https://www.jabref.org/</a></p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>使用<em><strong>bibtex</strong></em>管理参考文献有两种策略，一种是为每一篇论文新建一个***.bib<em><strong>文件，里边只放需要参考的文献，第二种是只创建一个</strong></em>.bib***文件，所有的参考文献都扔进去，每篇论文写作都使用这一个参考文献数据库。<br>JabRef为第二种方法提供了文献检索功能，可以根据条件筛选搜索找到需要引用的参考文献，还可以与TeXstudio实现联动，推送选中的记录到TeXstudio中。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><ol><li>进入官网，下拉页面，找到<em><strong>Download JabRef</strong></em>，点击进入</li><li>此时会进入到第三方的下载界面，下拉界面，找到JabRef版本列表，点击第一个<em><strong>JabRef Windows Installer</strong></em>，然后就会自动下载</li><li>下载完成后按步骤安装即可。</li></ol><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><ol><li>JabRef提供了友好的中文界面，可以自行探索</li><li>建议设置一个文件夹用来存放***.bib<em><strong>文件，再设置一个文件夹用来存放对应的参考文献，JabRef支持将</strong></em>.bib*** 里的记录链接到对应的PDF文件上。</li><li>搜索到对应的文献记录后，在工具栏的<em><strong>钥匙</strong></em>图标左边，有一个<em><strong>推送到外部程序</strong></em> 按钮，可以直接推送至TeXstudio上。当然前提是TeXstudio和JabRef用的是同一个***.bib***数据库，否则推送过去也是无效的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑软件 </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装TexLive</title>
      <link href="/2021/11/04/windows-an-zhuang-texlive/"/>
      <url>/2021/11/04/windows-an-zhuang-texlive/</url>
      
        <content type="html"><![CDATA[<p>TexLive的官网地址为：<a href="https://www.tug.org/texlive/">https://www.tug.org/texlive/</a></p><ol><li><p>进入官网，找到<em><strong>How to acquire TeX Live: download,on DVD, other methods</strong></em>，点击进入<em><strong>other methods</strong></em></p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-03ef97d9d5c74a68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>找到***Downloading one huge ISO file (typically to burn your own DVD)***，点击进入</p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-b0f62651fb781861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>找到<em><strong>download from a nearby CTAN mirror</strong></em>，点击进入</p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-22b7234d8fbfebfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>点击下载<em><strong>texlive2021.iso</strong></em>，等待下载完成</p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-29cba704a47f7a50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>选中文件，右键点击，选中菜单项第一条<em><strong>装载</strong></em>，进入到文件内部，然后找到并打开<em><strong>install-tl-advanced.bat</strong></em></p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-ba9d7446a1dff6f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>在<em><strong>Tex Live Installer</strong></em>界面设置安装路径，并取消勾选Texworks前端，然后点击安装</p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-cba3ea9558d40c98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>等待安装完成，安装期间不要关闭命令行窗口。</p></li><li><p>安装完成后，进入cmd窗口，输入下面的命令测试是否安装成功。</p><pre class="language-bash" data-language="bash"><code class="language-bash">tex <span class="token parameter variable">-version</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑软件 </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10安装无gui界面的Tranmission</title>
      <link href="/2021/02/24/win10-an-zhuang-wu-gui-jie-mian-de-transmission-li-yong-web-yuan-cheng-fang-wen/"/>
      <url>/2021/02/24/win10-an-zhuang-wu-gui-jie-mian-de-transmission-li-yong-web-yuan-cheng-fang-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>从官网下载安装包 <a href="https://transmissionbt.com/download/">https://transmissionbt.com/download/</a></li><li>选择安装组件，我们只需要Daemon和Web interface，其余组件不要安装。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-1c9756943e8a9437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720"></li><li>安装成功后，进入系统服务，确认安装的Transmission Daemon服务是否存在。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-160a1c27c917da04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720"></li><li>服务界面暂时不要关闭，之后需要多次重启该服务。</li><li>访问<a href="https://github.com/ronggang/transmission-web-control%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84web%E6%8E%A7%E5%88%B6%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%B9%B6%E6%A0%B9%E6%8D%AE%E7%BD%91%E9%A1%B5%E9%87%8C%E7%9A%84%E6%95%99%E7%A8%8B%E6%9B%BF%E6%8D%A2%E6%8E%89%E5%88%9D%E5%A7%8B%E7%9A%84web%E6%8E%A7%E5%88%B6%E7%95%8C%E9%9D%A2%E3%80%82">https://github.com/ronggang/transmission-web-control，下载最新的web控制界面，并根据网页里的教程替换掉初始的web控制界面。</a></li></ol><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li>目前Transmission已经成功以系统服务的方式运行，并且我们已经替换掉了web控制界面，但目前可能并不能直接通过web访问。</li><li>打开之前的系统服务界面，选择停止Transmission Daemon服务。</li><li>打开我的电脑，在地址栏输入<code>C:\Windows\ServiceProfiles</code>，然后一路进入<code>C:\Windows\ServiceProfiles\LocalService\AppData\Local\transmission-daemon</code>，然后编辑<code>setting.json</code>。</li><li>改动下面罗列的几项<pre class="language-none"><code class="language-none">"rpc-authentication-required": true,"rpc-bind-address": "0.0.0.0",    # 若这里改为"::"，则可以通过ipv6地址访问"rpc-enabled": true,    "rpc-host-whitelist": "*","rpc-host-whitelist-enabled": true,"rpc-password": "123456",    # 这里填写密码"rpc-port": 9091,"rpc-url": "/transmission/","rpc-username": "admin",      # 这里填写用户名"rpc-whitelist": "*",          # 白名单列表"rpc-whitelist-enabled": true,    # 白名单模式开关</code></pre></li><li>保存后，启动Transmission Daemon服务，访问<code>http://本机地址:9091</code>，输入用户名和密码，进入web控制界面。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>开机自动启动，并且不需要当心误触关闭。</li><li>没有界面，可以很好地保护自己的隐私。</li><li>Transmission在手机端有配套管理软件，管理较为方便。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
            <tag> Tranmission </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见光猫密码</title>
      <link href="/2021/01/08/chang-yong-guang-mao-mi-ma/"/>
      <url>/2021/01/08/chang-yong-guang-mao-mi-ma/</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">telecomadmin:admintelecomCUAdmin:CUAdminlnadmin:lnadminCMCCAdmin:aDm8H%MdA</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种静默执行cmd的vbs脚本</title>
      <link href="/2020/12/09/yi-chong-jing-mo-zhi-xing-cmd-de-vbs-jiao-ben/"/>
      <url>/2020/12/09/yi-chong-jing-mo-zhi-xing-cmd-de-vbs-jiao-ben/</url>
      
        <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><code class="language-bash">Set ws <span class="token operator">=</span> CreateObject<span class="token punctuation">(</span><span class="token string">"Wscript.Shell"</span><span class="token punctuation">)</span>ws.run <span class="token string">"cmd /c test.bat"</span>,0</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机自动开始win10热点</title>
      <link href="/2020/12/09/kai-ji-zi-dong-kai-qi-win10-nei-zhi-re-dian/"/>
      <url>/2020/12/09/kai-ji-zi-dong-kai-qi-win10-nei-zhi-re-dian/</url>
      
        <content type="html"><![CDATA[<ol><li>新建脚本，写入下面的代码，保存为 ***.ps1<pre class="language-none"><code class="language-none"># 声明变量$connectionProfile = [Windows.Networking.Connectivity.NetworkInformation,Windows.Networking.Connectivity,ContentType=WindowsRuntime]::GetInternetConnectionProfile()$tetheringManager = [Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager,Windows.Networking.NetworkOperators,ContentType=WindowsRuntime]::CreateFromConnectionProfile($connectionProfile)# 开启热点$tetheringManager.StartTetheringAsync()</code></pre></li><li>创建win10任务计划，开机自动执行该脚本即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch备忘录</title>
      <link href="/2020/10/29/pytorch-chang-yong-yu-fa/"/>
      <url>/2020/10/29/pytorch-chang-yong-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>###常用模块以及设置</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltdtype <span class="token operator">=</span> torch<span class="token punctuation">.</span>doubledevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span><span class="token punctuation">)</span></code></pre><p>###创建张量</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 转化np矩阵</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 创建一维等距向量</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token comment"># 创建全一矩阵，零矩阵</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>one_like<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>one_like<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token comment"># 创建随机矩阵</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>means<span class="token punctuation">,</span> std<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span></code></pre><h3 id="张量操作"><a href="#张量操作" class="headerlink" title="张量操作"></a>张量操作</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 增加维度</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>    <span class="token comment"># dim=0,1,...</span><span class="token comment"># 转置</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 切片</span>x_1 <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><p>###常用函数</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 数学函数</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 其他函数</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> dim <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>###模块类</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SLNN</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SLNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dense1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dense2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tanh <span class="token operator">=</span> torch<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>dense1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>dense2<span class="token punctuation">(</span>out<span class="token punctuation">)</span></code></pre><p>###损失函数与优化器</p><pre class="language-python" data-language="python"><code class="language-python">criterion <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token comment"># 定义损失函数</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model_eign<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">)</span><span class="token comment"># 优化器</span></code></pre><p>###迭代</p><pre class="language-python" data-language="python"><code class="language-python">Epoch <span class="token operator">=</span> <span class="token number">10000</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">99</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch[{}/{}],loss:{:.6f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> Epoch<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>###画图</p><pre class="language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># 画图时需要临时转化变量到cpu上</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过ipv6访问ipv4网站</title>
      <link href="/2020/06/30/jiao-yu-ipv6-liu-liang-fang-wen-ipv4-wang-zhan/"/>
      <url>/2020/06/30/jiao-yu-ipv6-liu-liang-fang-wen-ipv4-wang-zhan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>宿舍电脑可以免登录获取ipv6地址<br>家里有一台群晖，并且有ipv6地址<br>学校ipv6流量不计费</p></blockquote><p>有这三个条件就可以完美复制我的操作了。</p><h3 id="群晖端"><a href="#群晖端" class="headerlink" title="群晖端"></a>群晖端</h3><ol><li>从套件中心安装VPN-Sever。</li><li>按图设置，并且选择导出配置。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-12f63365fe776b89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>群晖端完成。</li></ol><h3 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h3><ol><li>安装OpenVpn，<a href="https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.9-I601-Win10">点此下载</a></li><li>修改之前下载的配置文件。<pre class="language-none"><code class="language-none">这里只展示修改的部分remote 这里写你的群晖域名地址floatredirect-gateway def1dhcp-option DNS 你家路由器的地址proto udp6</code></pre></li><li>导入配置文件，用户名和密码就是你群晖的账户和密码。不出意外的话，应该是成功了。</li></ol><h3 id="让win10热点也支持免流"><a href="#让win10热点也支持免流" class="headerlink" title="让win10热点也支持免流"></a>让win10热点也支持免流</h3><p>打开适配器设置，将OpenVPN的适配器共享给热点适配器。</p><h3 id="出现的问题，无法访问群晖的局域网地址"><a href="#出现的问题，无法访问群晖的局域网地址" class="headerlink" title="出现的问题，无法访问群晖的局域网地址"></a>出现的问题，无法访问群晖的局域网地址</h3><p>在路由器设置端口转发，源ip设置为OpenVPN服务器地址，就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10安装svg图像预览补丁</title>
      <link href="/2020/03/21/win10-an-zhuang-svg-tu-xiang-yu-lan-bu-ding/"/>
      <url>/2020/03/21/win10-an-zhuang-svg-tu-xiang-yu-lan-bu-ding/</url>
      
        <content type="html"><![CDATA[<p><a href="https://jingyan.baidu.com/article/b0b63dbf5f4b314a483070b7.html">https://jingyan.baidu.com/article/b0b63dbf5f4b314a483070b7.html</a><br>安装完成后等待重新缓存即可.</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD技巧快速分类文件</title>
      <link href="/2020/03/21/cmd-ji-qiao-zhi-kuai-su-fen-lei-wen-jian/"/>
      <url>/2020/03/21/cmd-ji-qiao-zhi-kuai-su-fen-lei-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>保存成.bat文件,放到想要分类的目录下运行即可.也可以设置成计划任务.</p><pre class="language-bat" data-language="bat"><code class="language-bat">move *.zip  D:\Media\Download\Compressedmove *.rar  D:\Media\Download\Compressedmove *.7z   D:\Media\Download\Compressedmove *.exe  D:\Media\Download\Programsmove *.jpg  D:\Media\Download\Picturesmove *.png  D:\Media\Download\Picturesmove *.mp3  D:\Media\Download\Musicmove *.mp4  D:\Media\Download\Videomove *.txt  D:\Media\Download\Documentsmove *.doc  D:\Media\Download\Documentsmove *.pdf  D:\Media\Download\Documents</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器模拟微信浏览器</title>
      <link href="/2020/03/20/chrome-liu-lan-qi-mo-ni-wei-xin-liu-lan-qi/"/>
      <url>/2020/03/20/chrome-liu-lan-qi-mo-ni-wei-xin-liu-lan-qi/</url>
      
        <content type="html"><![CDATA[<ol><li>打开Chrome浏览器，按下F12（打开开发人员工具或者右键审查）。</li><li>点击图示，然后打开设置（Settings）<br><img src="https://upload-images.jianshu.io/upload_images/18751695-2b1918de6facd92b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><img src="https://upload-images.jianshu.io/upload_images/18751695-bfb57ae12e770266.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>选择设备(Devices)，添加模拟设备（Add custom device）<br><img src="https://upload-images.jianshu.io/upload_images/18751695-e98581e8524afc9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>将下面的UserAgent填入其中。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-dfc9e73b0b5cba21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ol><p>###UserAgent</p><pre class="language-none"><code class="language-none">Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12A365 MicroMessenger/6.6.6 NetType/WIFI</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10下的Linux子系统</title>
      <link href="/2020/03/18/win10-xia-de-linux-zi-xi-tong/"/>
      <url>/2020/03/18/win10-xia-de-linux-zi-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>1.打开设置，进入更新与安全，选择启动开发者模式。<br>2.进入控制面板，添加Windows功能，勾选 “适用于 Linux 的 Windows 子系统”。<br>3.Win10应用商店，搜索Ubuntu下载。<br>4.打开桌面上的Ubuntu图标，等待完成安装。<br>5.修改终端背景颜色为R40，G10，B36。光标为白色竖条状。<br>6.根据Ubuntu的版本号选择阿里源。</p><pre class="language-none"><code class="language-none">lsb_release -c    查看版本号,一般是bionicsudo vim /etc/apt/sources.list    编辑源列表文件把原有的源都注释掉，并且加入这些阿里源(bionic)deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse修改完成后退出保存，然后运行sudo apt-get update      更新源列表</code></pre><p>7.安装好pip3之后，修改源为国内源。</p><pre class="language-none"><code class="language-none">mkdir ~/.pip    创建pip文件夹vim ~/.pip/pip.conf      创建pip.conf文件，并进入编辑写入以下下内容并退出保存。[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple/ [install]trusted-host = pypi.tuna.tsinghua.edu.cn最后记得重启生效。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖解决python输出中文问题</title>
      <link href="/2020/03/02/qun-hui-jie-jue-python-shu-chu-zhong-wen-wen-ti/"/>
      <url>/2020/03/02/qun-hui-jie-jue-python-shu-chu-zhong-wen-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>搬运自<a href="https://www.cnblogs.com/w1618/p/8513368.html">https://www.cnblogs.com/w1618/p/8513368.html</a></p><p>1.修改系统编码格式,可能因为系统重启的原因失效,所以建议第二个方法.</p><pre class="language-none"><code class="language-none">export LC_ALL="UTF-8"</code></pre><p>2.修改python的标准输出的编码格式，如下语句：</p><pre class="language-none"><code class="language-none">import ioimport syssys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖使用阿里云DDNS解析ipv4和ipv6</title>
      <link href="/2020/01/24/qun-hui-shi-yong-a-li-yun-ddns-ipv4-he-ipv6/"/>
      <url>/2020/01/24/qun-hui-shi-yong-a-li-yun-ddns-ipv4-he-ipv6/</url>
      
        <content type="html"><![CDATA[<p>复制，写成sh脚本，添加进群晖定时任务即可。<br>###ipv4<br>注意前四个需要自己填入，还有获取ip那里要注意网络接口，我的是ppp0。</p><pre class="language-none"><code class="language-none">#!/bin/shApiId="***************"ApiKey="***************"Domain='************'SubDomain='********'      #这四个自己写Nonce=$(date -u "+%N")Timestamp=$(date -u "+%Y-%m-%dT%H%%3A%M%%3A%SZ")Nonce=$Timestampurlencode() {local raw="$1";local len="${#raw}"local encoded=""for i in `seq 1 $len`; dolocal j=$((i+1))local c=$(echo $raw | cut -c$i-$i)case $c in [a-zA-Z0-9.~_-]) ;;*)c=$(printf '%%%02X' "'$c") ;;esacencoded="$encoded$c"doneecho $encoded}# $1 = query stringgetSignature() {local encodedQuery=$(urlencode $1)local message="GET&amp;%2F&amp;$encodedQuery"local sig=$(echo -n "$message" | openssl dgst -sha1 -hmac "$ApiKey&amp;" -binary | openssl base64)echo $(urlencode $sig)}sendRequest() {local sig=$(getSignature $1)local result=$(wget -qO- --no-check-certificate --content-on-error "https://alidns.aliyuncs.com?$1&amp;Signature=$sig")echo $result}getRecordId() {echo "获取 $SubDomain.$Domain 的 IP..." &gt;&amp;2local queryString="AccessKeyId=$ApiId&amp;Action=DescribeSubDomainRecords&amp;Format=JSON&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$Nonce&amp;SignatureVersion=1.0&amp;SubDomain=$SubDomain.$Domain&amp;Timestamp=$Timestamp&amp;Type=A&amp;Version=2015-01-09"local result=$(sendRequest "$queryString")local code=$(echo $result | sed 's/.*,"Code":"\([A-z]*\)",.*/\1/')local recordId=$(echo $result | sed 's/.*,"RecordId":"\([0-9]*\)",.*/\1/')if [ "$code" = "$result" ] &amp;&amp; [ ! "$recordId" = "$result" ]; thenlocal ip=$(echo $result | sed 's/.*,"Value":"\([0-9\.]*\)",.*/\1/')if [ "$ip" == "$NewIP" ]; thenecho "IP 无变化, 退出脚本..." &gt;&amp;2echo "quit"elseecho $recordIdfielseecho "null"fi}# $1 = record ID, $2 = new IPupdateRecord() {local queryString="AccessKeyId=$ApiId&amp;Action=UpdateDomainRecord&amp;DomainName=$Domain&amp;Format=JSON&amp;RR=$SubDomain&amp;RecordId=$1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$Nonce&amp;SignatureVersion=1.0&amp;Timestamp=$Timestamp&amp;Type=A&amp;Value=$2&amp;Version=2015-01-09"local result=$(sendRequest $queryString)local code=$(echo $result | sed 's/.*,"Code":"\([A-z]*\)",.*/\1/')if [ "$code" = "$result" ]; thenecho "$SubDomain.$Domain 已指向 $NewIP." &gt;&amp;2elseecho "更新失败." &gt;&amp;2echo $result &gt;&amp;2fi}# $1 = new IPaddRecord() {local queryString="AccessKeyId=$ApiId&amp;Action=AddDomainRecord&amp;DomainName=$Domain&amp;Format=JSON&amp;RR=$SubDomain&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$Nonce&amp;SignatureVersion=1.0&amp;Timestamp=$Timestamp&amp;Type=A&amp;Value=$1&amp;Version=2015-01-09"local result=$(sendRequest $queryString)local code=$(echo $result | sed 's/.*,"Code":"\([A-z]*\)",.*/\1/')if [ "$code" = "$result" ]; thenecho "$SubDomain.$Domain 已指向 $NewIP." &gt;&amp;2elseecho "添加失败." &gt;&amp;2echo $result &gt;&amp;2fi}# Get new IP addressecho "获取当前 IP..."NewIP=`ip addr show ppp0 | grep "inet" | awk '{print $2}' | awk -F"/" '{print $1}' `echo "当前 IP 为 $NewIP."# Get record ID of sub domainrecordId=$(getRecordId)if [ ! "$recordId" = "quit" ]; thenif [ "$recordId" = "null" ]; thenecho "域名记录不存在, 添加 $SubDomain.$Domain 至 $NewIP..."addRecord $NewIPelseecho "域名记录已存在, 更新 $SubDomain.$Domain 至 $NewIP..."updateRecord $recordId $NewIPfifi</code></pre><p>###ipv6<br>同样前四个自己填，和上边的类似。网络接口也同理，可以进群晖ssh，用ip addr自己查接口名称。</p><pre class="language-none"><code class="language-none">#!/bin/shaliddnsipv6_ak="**************"aliddnsipv6_sk="**********************"aliddnsipv6_name1='****************'aliddnsipv6_domain='**************'aliddnsipv6_ttl="600"if [ "$aliddnsipv6_name1" = "@" ]then  aliddnsipv6_name=$aliddnsipv6_domainelse  aliddnsipv6_name=$aliddnsipv6_name1.$aliddnsipv6_domainfinow=`date`die () {    echo $1}ipv6s=`ip addr show eth0 | grep "inet6.2409" | awk '{print $2}' | awk -F"/" '{print $1}'` || die "$ipv6"for ipv6 in $ipv6sdo  #ipv6 = $ipv6  breakdoneecho $ipv6current_ipv6=`nslookup -query=AAAA $aliddnsipv6_name 2&gt;&amp;1`#echo $current_ipv6current_ipv6=`echo "$current_ipv6" | grep 'Address: ' | tail -n1 | awk '{print $NF}'`echo $current_ipv6if [ "$?" -eq "0" ]then    current_ipv6=`echo "$current_ipv6" | grep 'Address: ' | tail -n1 | awk '{print $NF}'`    echo $current_ipv6    if [ "$ipv6" = "$current_ipv6" ]    then        echo "skipping"    fi # fix when A record removed by manual dns is always update errorelse    unset aliddnsipv6_record_idfitimestamp=`date -u "+%Y-%m-%dT%H%%3A%M%%3A%SZ"`urlencode() {    # urlencode &lt;string&gt;    out=""    while read -n1 c    do        case $c in            [a-zA-Z0-9._-]) out="$out$c" ;;            *) out="$out`printf '%%%02X' "'$c"`" ;;        esac    done    echo -n $out}enc() {    echo -n "$1" | urlencode}send_request() {    local args="AccessKeyId=$aliddnsipv6_ak&amp;Action=$1&amp;Format=json&amp;$2&amp;Version=2015-01-09"    local hash=$(echo -n "GET&amp;%2F&amp;$(enc "$args")" | openssl dgst -sha1 -hmac "$aliddnsipv6_sk&amp;" -binary | openssl base64)    curl -s "http://alidns.aliyuncs.com/?$args&amp;Signature=$(enc "$hash")"}get_recordid() {    grep -Eo '"RecordId":"[0-9]+"' | cut -d':' -f2 | tr -d '"'}query_recordid() {    send_request "DescribeSubDomainRecords" "SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;SubDomain=$aliddnsipv6_name&amp;Timestamp=$timestamp&amp;Type=AAAA"}update_record() {    send_request "UpdateDomainRecord" "RR=$aliddnsipv6_name1&amp;RecordId=$1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;TTL=$aliddnsipv6_ttl&amp;Timestamp=$timestamp&amp;Type=AAAA&amp;Value=$(enc $ipv6)"}add_record() {    send_request "AddDomainRecord&amp;DomainName=$aliddnsipv6_domain" "RR=$aliddnsipv6_name1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;TTL=$aliddnsipv6_ttl&amp;Timestamp=$timestamp&amp;Type=AAAA&amp;Value=$(enc $ipv6)"}#add support */%2A and @/%40 recordif [ "$aliddnsipv6_record_id" = "" ]then    aliddnsipv6_record_id=`query_recordid | get_recordid`    #echo '-----------------' $aliddnsipv6_record_idfiif [ "$aliddnsipv6_record_id" = "" ]then    aliddnsipv6_record_id=`add_record | get_recordid`    echo "added record $aliddnsipv6_record_id"else    update_record $aliddnsipv6_record_id    echo "updated record $aliddnsipv6_record_id"fi</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7防火墙</title>
      <link href="/2019/11/28/centos7-fang-huo-qiang-ming-ling/"/>
      <url>/2019/11/28/centos7-fang-huo-qiang-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>添加端口</p><pre class="language-none"><code class="language-none">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</code></pre><p>重新载入</p><pre class="language-none"><code class="language-none">firewall-cmd --reload</code></pre><p>查看</p><pre class="language-none"><code class="language-none">firewall-cmd --zone= public --query-port=80/tcp</code></pre><p>删除</p><pre class="language-none"><code class="language-none">firewall-cmd --zone= public --remove-port=80/tcp --permanent</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宇宙终结命运</title>
      <link href="/2019/11/06/the-end-of-universe-yu-zhou-zhong-jie-ming-yun/"/>
      <url>/2019/11/06/the-end-of-universe-yu-zhou-zhong-jie-ming-yun/</url>
      
        <content type="html"><![CDATA[<p>Based on what is known, scientists have drawn up a list of the three most likely ultimate fates.<br>根据已知的信息，科学家列出了三种最有可能发生的终极命运。</p><blockquote><ol><li>Fate 1: heat death<br>命运一：热寂</li><li>Fate 2: the big rip<br>命运二：大撕裂</li><li>Fate 3: big collapse &amp; big bounce<br>命运三：大坍缩&amp;大反弹</li></ol><p>###Fate 1: heat death（命运一：热寂）<br>Despite the “hot”  in the name, the ending is actually dark and cold.<br>虽然名字里带着“热”，但这个结局其实又黑又冷。<br>It is based on the second law of thermodynamics: the law of entropy. Entropy is the amount of chaos in a system. Isolated systems tend to go from order to chaos until they reach their most chaotic equilibrium.<br>它的理论基础是热力学第二定律：熵增定律。熵，指的是系统的混乱程度。孤立系统总是趋向于从有序变得混乱，直到达到最混乱的平衡状态。<br>Entropy increase is actually pretty easy to understand. Like a glass of water, let’s put some red ink in it. At first, the entropy of this cup of liquid is a little bit smaller, a little bit more ordered, because some of it is red, some of it is transparent; Then, the red ink will spread out automatically until the whole cup of liquid becomes uniform, which is the process of entropy increase.<br>熵增其实很好理解。比如一杯水，让我们朝里面滴一些红墨水。刚开始，这杯液体的熵还比较小，比较有秩序，因为有的地方很红、有的地方很透明；接下来，红墨水会自动扩散开来，直到整杯液体变得均匀为止，这就是熵增过程。<br>As is the universe. Although the universe is now have various celestial bodies such as stars, planets, and comets. But after a long time, as the universe expands, the celestial bodies will move away from each other, and the stars will gradually run out of fuel and stop glowing. In the following darkness, matter will slowly decay. In the end, even the seemingly indestructible black hole will evaporate and disappear. The temperature of the entire universe is close to  0 K,there is no longer any available energy or heat, and there is no longer any mechanical movement. The universe is immersed in eternal death.<br>宇宙也是这样的。虽然现在的宇宙拥有恒星、行星、彗星等各种各样的天体；但在很久很久以后，随着宇宙的不断膨胀，天体之间会彼此远离，恒星会逐渐耗尽燃料、停止发光。在接下来的黑暗中，物质会慢慢衰变。到最后，就连看起来坚不可摧的黑洞都会蒸发消失。整个宇宙的温度接近绝对零度，不再有可利用的能源或热量，也不再有任何机械运动。宇宙陷入了永恒的死寂。<br>###Fate 2: the big rip（命运二：大撕裂）<br>First of all, let’s imagine that if we throw a ball into the sky, during the rise of the ball, due to the gravity of the earth, it will surely slow down slowly and eventually fall back to the ground.<br>首先让我们想象一下，如果朝天空扔一个小球，在小球的上升过程中，由于地球的引力作用，它肯定会慢慢减速，最后掉回到地上。<br>For a long time, the scientific community believed that the expansion of the universe followed the same principle – that the expansion of the universe must be slower and slower because of the gravitational action between celestial bodies.<br>在很长一段时间里，科学界一直认为，宇宙的膨胀也遵循着同样的原理——由于天体间的引力作用，宇宙的膨胀速度肯定是越来越慢。<br>But in 1998, scientists were surprised to discover that instead of slowing down, the universe was accelerating. This means that in addition to the gravitational pull that pulls them back, there must be some repulsive force driving them away from each other. Scientists have named the source of this mysterious repulsive force “dark energy.”<br>但1998年，科学家惊讶地发现，宇宙不但没有减速，反而正在加速膨胀。这就意味着，除了把天体往回拉的引力之外，肯定还存在着某种排斥力，在驱使着天体彼此远离。科学家把这种神秘排斥力的源头命名为“暗能量”。<br>According to mathematical models, dark energy could eventually defeat all other forces and accelerate the expansion of the universe indefinitely until a “big rip” occurs in 22 billion years.<br>根据数学模型，暗能量最终有可能打败一切其它力量，使得宇宙无限制加速膨胀下去，直到220亿年后发生一场“大撕裂”。<br>First the collapse of the galaxy, then the collapse of the planetary system, followed by the explosion of stars and planets, and finally the collapse of atoms and nuclei in an instant. Thus the universe came to an end in an accelerating frenzy.<br>首先是星系的瓦解，然后是行星系统的崩溃，紧接着恒星、行星通通爆炸，最后连原子和原子核都会在一瞬间分崩离析。就这样，宇宙在加速的狂暴中迎来大结局。<br>###Fate 3: big collapse &amp; big bounce（命运三：大坍缩&amp;大反弹）<br>If gravity wins the battle between gravity and repulsive forces, the expansion of the universe could slow down until it stops, and then start shrinking back, like the big bang upside down. This condition is known as “big collapse.”<br>如果在引力和斥力的争夺战中，最终获胜的是引力，那么宇宙的膨胀就有可能减速、直到停止，最后开始往回收缩，收缩过程就像是倒过来的宇宙大爆炸一样。这种情况被称为“大坍缩”。<br>And when the universe shrinks back to a singularity, there may be a new big bang. Our universe may have been in this perpetual cycle. This cyclical hypothesis is known as the “great bounce”.<br>而当宇宙收缩回一个奇点之后，或许又会迎来一场新的大爆炸。我们的宇宙也许一直处在这种周而复始的循环中。这种循环假说被称为“大反弹”。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科普知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 宇宙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox报错code E_FAIL (0x80004005)</title>
      <link href="/2019/11/06/virtualbox-bao-cuo-code-e-fail-0x80004005/"/>
      <url>/2019/11/06/virtualbox-bao-cuo-code-e-fail-0x80004005/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>Windows 10，更新了VirtualBox，不知道怎么操作的，无法打开虚拟机了，显示<em><strong>无法为虚拟机创建一个任务</strong></em>，错误代码为<em><strong>code E_FAIL (0x80004005)</strong></em></p><pre class="language-none"><code class="language-none">VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component ConsoleWrap, interface IConsole</code></pre><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><ol><li>在<em><strong>Windows 功能</strong></em> 里关闭<em><strong>Hyper-V</strong></em> 功能，无效</li><li>卸载重装<em><strong>VirtualBox</strong></em> 和<em><strong>Vagrant</strong></em> ，无效</li></ol><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><blockquote><p>来自于：<a href="https://stackoverflow.com/questions/37955942/vagrant-up-vboxmanage-exe-error-vt-x-is-not-available-verr-vmx-no-vmx-code">https://stackoverflow.com/questions/37955942/vagrant-up-vboxmanage-exe-error-vt-x-is-not-available-verr-vmx-no-vmx-code</a></p></blockquote><p>以管理员身份运行以下命令</p><pre class="language-none"><code class="language-none">bcdedit /set hypervisorlaunchtype off</code></pre><p>然后重启即可。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宇宙暴涨和膨胀</title>
      <link href="/2019/11/06/inflation-expansion-of-universe-yu-zhou-bao-zhang-he-peng-zhang/"/>
      <url>/2019/11/06/inflation-expansion-of-universe-yu-zhou-bao-zhang-he-peng-zhang/</url>
      
        <content type="html"><![CDATA[<p>###very early universe inflation（极早期宇宙暴胀）<br>The period of inflation began 10^-36^ seconds after the big bang and lasted between 10^-33^ and 10^-32^ seconds after the big bang.<br>暴胀时期在大爆炸后10^−36^ 秒开始，持续到大爆炸后10^-33^ 至10^−32^秒之间。<br>The universe expanded at least 10^26^ times during the inflationary phase<br>宇宙在暴胀阶段至少膨胀了10^26^倍。<br>what is this concept? If we assume that the universe’s diameter is only one meter before inflation, then in this short time the universe expands to a size of at least 10^26^ meters in diameter. about 23 billion light years, and our solar system’s diameter has no more than two light years , galactic system’s diameter is only about 100,000 light years.<br>这是什么概念呢？如果假设宇宙在暴胀前直径只有一米，那么在这短短的时间里宇宙就扩张成了直径至少10^26^米，约为二百三十亿光年的规模，而我们的太阳系直径最多只有两光年，银河系也只有约十万光年。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-2e19eb471a160fd3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宇宙可能的几何形状"><br>The inflation of the universe largely affects the shape of the universe. From the general theory of relativity, scientists have inferred a critical density$\Omega_0$.When $\Omega_0=1$ , the shape of the universe is flat;When $\Omega_0=1$ , the shape of the universe is open;When $\Omega_0=1$ , the shape of the universe is closed.<br>宇宙暴胀很大程度上影响了宇宙的形状。由广义相对论，科学家推断出了一个临界质量密度 $\Omega_0$ 。$\Omega_0=1$ 宇宙的形状为扁平态；$\Omega_0&lt;1$ 宇宙的形状为开放态；$\Omega_0&gt;1$ 宇宙的形状为封闭态。<br>The early inflation of the universe caused the mass density of the universe to drop drastically. The current mainstream view is that the universe is a flat shape, dark matter and dark energy account for 95% of the mass of the universe<br>而宇宙早期的暴胀使得宇宙的质量密度急剧地下降，现在的主流观点认为，宇宙是扁平状的形状，暗物质和暗能量占宇宙质量的95%。<br>###Accelerated expansion of the universe（宇宙加速膨胀）<br>Between 1912 and 1922, American astronomer Visto Shriver observed the spectrum of 41 galaxies and found that the spectrum of 36 of them was red-shifted. He believe that this phenomenon means that these galaxies are moving away from the Earth.<br>1912年到1922年间，美国天文学家维斯托·斯里弗观测了41个星系的光谱，发现其中的36个星系的光谱发生红移，他认为这种现象意味着这些星系正在远离地球。<br>In 1927, the Belgian astronomer George Lemet calculated a solution to the Einstein field equation and found that the universe was constantly expanding.<br>1927年，比利时天文学家乔治·勒梅特计算出爱因斯坦场方程的一个解，发现宇宙在不断地膨胀。<br>In 1929, American astronomer Hubble published his observations: The farther away from the Milky Way, the faster the galaxies retreat.<br>1929年，美国天文学家哈勃发表其观测结果：距离银河系越远的星系退行越快。<br><strong>Hubble–Lemaître law</strong>: $v=H_0D$<br><strong>哈勃–勒梅特定律</strong>：$v=H_0D$<br>$H_0$ is Hubble constant,D is distance between the galaxy and the observer.Hubble–Lemaître law is say:the apparent retreat speed of the extragalactic galaxies is proportional to the distance, that is, the farther the distance is, the higher the viewing speed.<br>$H_0$是哈勃常数,D与观察者之间的距离。哈勃–勒梅特定律在说，河外星系的视向退行速度与距离成正比，即距离越远，视向速度越大。<br>What needs to be explained here is that this speed can be arbitrarily large. This is because this speed is not the running speed of the object, but the expansion speed of the space.<br>这里需要说明的是，这个速度是可以任意大的，这是因为这个速度并不是物体的运行速度，而是空间的膨胀速度。<br>It can be understood that the overall distance  increases as $\Delta x$ becomes larger.Therefore, this speed is negligible for the object in it, that is, the small scale, regardless of whether or not the speed of light exceeds.<br>可以理解为整体距离随着$\Delta x$增加而增加。因此这个速度对处于其中的物体，也就是小尺度来说，是微乎其微的，无需考虑是否超光速。<br>It is easy to think that if the galaxy’s retreat is faster than the speed of light, then we will never see the light from this galaxy, and the galaxy will never be able to make any connection with us.<br>容易想到的是，如果星系的退行速度大于光速，那么我们将永远无法看到这个星系发出的光，这个星系事实上将永远无法和我们产生任何联系。<br>If we divide the speed of light by the Hubble constant, we can calculate how far away from our planet, the speed of the galaxy’s retreat reaches the speed of light.<br>我们如果用光速除以哈勃常数，就可计算出距我们地球多远距离时，星系的退行速度就达到光速了。<br>The distance calculated is 13.29 billion light years, that is, the expansion speed of the space outside the earth at 13.29 billion light years is superluminal.<br>经计算这个距离为132.9亿光年，也就是说，距地在132.9亿光年以外的宇宙空间的膨胀速度是超光速的。</p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-e37b06340e043240.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Observable Universe"></p><p><strong>The observable universe</strong> is a sphere of space centered on the observer, small enough for the observer to observe objects within the range, that is, the light emitted by the object has enough time to reach the observer.<br><strong>可观测宇宙</strong>是一个以观测者作为中心的球体空间，小得足以让观测者观测到该范围内的物体，也就是说物体发出的光有足够时间到达观测者。<br>With the above conclusions, some people may think that the observable universe radius is only 13 billion light years, but in fact, due to the expansion of the universe, in the early universe, some of the galaxies are located within the radius of the observable universe, as the universe expands,more and more galaxies will thus have extremely high redshift values, which gradually disappear from the line of sight and eventually become unobservable. We have also counted these galaxies in the observable universe, so we now speculate that the observable universe has a radius of about 46.5 billion light years and a diameter of about 93 billion light years.<br>有上述结论，可能会有人认为可观测宇宙半径只有130多亿光年，但是，事实上，由于宇宙膨胀，在宇宙早期，有一部分星系是位于可观测宇宙半径内的，随着宇宙的不断膨胀，越来越多的星系会因而具有极高的红移值，它们渐渐地从视线中消失，最终变成不可观测。我们把这些星系也算在可观测宇宙了，因此现在推测可观测宇宙半径约为465亿光年，直径约为930亿光年。<br>Assuming that the universe will continue to expand, the distance of the future horizon will be calculated as a gap of 19 billion seconds (62 billion light years). This means that in theory we can observe the number of star coefficients in the infinite time in the future is the number of current observable galaxies multiplied by a factor of 2.36.<br>假设宇宙将一直持续膨胀下去，未来视界的同移距离经计算为190亿秒差距（620亿光年）。这意味著在理论上我们在未来无限时间内可观测的星系数量是当前可观测星系的数量乘以系数2.36。<br>We can’t know anything that has no causal relationship with us, but some scientists speculate that the size of the universe is at least 3x10^23^ times larger than the observable universe.<br>我们不可能知道任何与我们没有因果关系的事物，但是一些科学家推测，整个宇宙的大小至少比可观测宇宙大3x10^23^倍。</p>]]></content>
      
      
      <categories>
          
          <category> 科普知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 宇宙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宇宙微波背景辐射</title>
      <link href="/2019/11/06/cosmic-microwave-background-radiation-yu-zhou-wei-bo-bei-jing-fu-she/"/>
      <url>/2019/11/06/cosmic-microwave-background-radiation-yu-zhou-wei-bo-bei-jing-fu-she/</url>
      
        <content type="html"><![CDATA[<p>After the nuclear epics,about 380,000 years from the big bang, the temperature continues to cool, and electrons are captured by protons and nucleus to form hydrogen atoms and helium atoms. This period is called the compound period.<br>核子时代之后，距离大爆炸约38万年，温度持续冷却，电子开始被质子和氦核子捕获，形成氢原子和氦原子，这个时期称为复合时期。<br>After the compound is over, most of the protons in the universe become neutral atoms. Therefore, the photons are no longer disturbed and can travel freely in the universe. This cosmic event is called photon decoupling.<br>复合结束后，宇宙中的大部分质子变成了氢原子，因此，光子不再受到干扰，可以在宇宙中自由穿行，这个宇宙事件称为光子退耦。<br>Before decoupling occurs,most photons interact with electrons and protons in the photon-baryon fluid,resulting in an opaque or “foggy” universe.<br>在退耦发生之前，宇宙中多数的光子都与电子和质子在光子-重子液中进行交互作用，其结果是宇宙是不透明或处在“大雾”之中。<br>At this point, the universe began to become transparent. The first undisturbed photons arrived at us after a long period of time and distance. As the space expands, the wavelength increases with time, the light becomes weaker and the energy is lower.<br>至此，宇宙开始变得透明。第一批不受干扰的光子再经过漫长的时间和距离后到达我们这里，由于空间膨胀，导致波长随着时间的推移而增加，光线越来越微弱，能量也越来越低。<br>Finally, these light from the depths of the universe become microwave noise with a wavelength of 7.35 cm, and their temperature in the black body radiation spectrum is about 3K. This is the microwave background radiation we are familiar with.<br>最后，这些来自宇宙深处的光变成了波长为7.35厘米的微波噪声，它们在黑体辐射光谱的温度约为3K。这就是我们熟知的微波背景辐射。<br>In order to detect these microwave background radiation, WMAP came into being.<br>为了探测这些微波背景辐射，WMAP应运而生。<br>This is the Wilkinson Microwave Anisotropy Probe,or”WMAP”<br>这就是威尔金微波各向异性探测器（WMAP）。<br>It was launched to scan the early universe for the find-scale origins of this cosmin atlas.<br>它被用来扫描电磁波，寻找精细的早期宇宙图。<br>WMAP traveled beyond any interference from Earth,to a posion balanced between the Earth and the Sun.<br>WMAP远离了地球的干扰，到达了地球和太阳之间。<br>There,for two years,its detectors took in the pristine light of deep space.<br>在那里，两年来，它的探测器接收了深空中未被污染的光。<br>This is what WMAP saw!<br>这就是WMAP所见！<br>A pattern consistent with the filaments and voids that had evolved in the universe at large.<br>一种与宇宙大纤维结构相一致的图案。<br>It came 38000 years after the big bang.<br>它来自于大爆炸后38万年。<br>This is Cosmic microwave background radiation(CMB or CMBR)<br>这就是宇宙微波背景辐射。<br>It is an important source of data on the early universe because it is the oldest electromagnetic radiation in the universe, dating to the epoch of recombination.<br>宇宙微波背景是宇宙学的基础，因其为宇宙中最古老的光，可追溯至再复合时期。<br>With a traditional optical telescope, the space between stars and galaxies (the background) is completely dark. However, a sufficiently sensitive radio telescope shows a faint background noise, or glow, almost isotropic, that is not associated with any star, galaxy, or other object.<br>利用传统的光学望远镜，恒星和星系之间的空间（背景）是一片漆黑。然而，利用灵敏的辐射望远镜却可发现微弱的背景辉光，且在各个方向上几乎一模一样，与任何恒星，星系或其他对象都毫无关系。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-d59a6293f5ffa085.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Cosmic microwave background radiation"><br>In this image, the temperature of the cosmic microwave background in the blackbody radiation spectrum is 2.72548± 0.00057k, which means that the brightest and darkest regions in the image are only about 0.00114k apart, revealing a profound principle: the universe is homogeneous and isotropic under large-scale observation.<br>在这张图片中，宇宙微波背景在黑体辐射光谱的温度为2.72548±0.00057 K，即图片中最亮的区域与最暗的区域仅仅只差了约0.00114K，这揭示了一个影响深刻的原则：在大尺度的观测下，宇宙是均质与各向同性的。<br>One of the winners of this year’s Nobel Prize in Physics is related to CMB.<br>今年的诺贝尔物理学奖中，有一名得主和CMB有关。<br>Peebles has made many important contributions to the Big Bang model. With Dicke and others (nearly two decades after George Gamow, Ralph A. Alpher and Robert C. Herman), Peebles predicted the cosmic microwave background radiation.<br>皮布尔斯对大爆炸模型做出了许多重要贡献。在乔治·伽莫夫, 拉尔夫·阿尔菲和罗伯特·赫尔曼预测微波背景辐射近二十年之后，他与罗伯特·迪克等人解释了宇宙微波背景辐射是大爆炸的印记。</p>]]></content>
      
      
      <categories>
          
          <category> 科普知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 宇宙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soundseeder(已订阅)-手机同步播放歌曲神器</title>
      <link href="/2019/08/24/soundseeder-yi-ding-yue-shou-ji-tong-bu-bo-fang-ge-qu-shen-qi/"/>
      <url>/2019/08/24/soundseeder-yi-ding-yue-shou-ji-tong-bu-bo-fang-ge-qu-shen-qi/</url>
      
        <content type="html"><![CDATA[<p>用过荣耀手机的人想必对其自带的<strong>Party模式</strong>App很是喜欢。</p><table><thead><tr><th align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-4b9d3852fe411e00.jpg"></th><th align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-1ab9df2d0ceeabf3.jpg"></th><th align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-e83269c355dcd4d1.jpg"></th></tr></thead><tbody><tr><td align="center">这个软件可以很轻易的在荣耀手机间同步播放歌曲，只需要一个人创建音乐party，其他人在同一局域网内扫码加入即可。但是缺陷很明显，这是个自带应用，并且只支持荣耀手机，哪怕提取出apk文件，也只能在华为手机间运行。因此，引出了今天的主角——<strong>Soundseeder</strong></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>Soundseeder</strong>是一款可以同步播放歌曲的手机软件，最多支持16台设备，只需要在同一局域网或者热点下，就可以实现多个设备同时播放音乐，享受这震撼的环绕立体声吧!再也不用愁聚会时没有音响了!</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">###下载链接</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">链接: <a href="https://pan.baidu.com/s/1sY_cGynLSucoCAx-zlTpdA">https://pan.baidu.com/s/1sY_cGynLSucoCAx-zlTpdA</a> 提取码: x2an</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">选择<em><strong>SoundSeeder-Music-Player-Premium-v2.0.1</strong></em>即可。</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">###使用方法</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-b4dec9d623145e4a.jpg"></td><td align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-6b7e7defc03585fd.jpg"></td><td align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-c0f1a2332ea5d3de.jpg"></td></tr><tr><td align="center">:-:</td><td align="center">:-:</td><td align="center">:-:</td></tr><tr><td align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-1083f7aee0fd70a1.jpg"></td><td align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-f5d5e396368f29aa.jpg"></td><td align="center"><img src="https://upload-images.jianshu.io/upload_images/18751695-8cd574c352cadf40.jpg"></td></tr></tbody></table><ol><li>图一为打开时的主界面。</li><li>注意图二和图三，当你的手机是主播放器时，选择图二，即<em><strong>My Music</strong></em>;如果你希望你的手机只是被控制的，选择<em><strong>Sooundseeder Player</strong></em></li><li>同一局域网，并且设置好主播放器和从播放器后，会自动连接。</li><li>如果希望播放本地音乐，可以选择图四的<em><strong>My Music</strong></em>下的<em><strong>Internal Memory</strong></em>，进入图五，选择*<strong>SONGS</strong>就会显示出本地的音乐，直接点击即可。</li><li>软件还可以设置手机的声道、播放延迟等，具体自己研究吧，这里不再细说了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex希腊字母备忘录</title>
      <link href="/2019/08/22/xi-la-zi-mu/"/>
      <url>/2019/08/22/xi-la-zi-mu/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">示例</th><th align="center">代码</th><th align="center">示例</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">$\alpha$</td><td align="center">\alpha</td><td align="center">$\beta$</td><td align="center">\beta</td></tr><tr><td align="center">$\gamma$</td><td align="center">\gamma</td><td align="center">$\delta$</td><td align="center">\delta</td></tr><tr><td align="center">$\epsilon$</td><td align="center">\epsilon</td><td align="center">$\varepsilon$</td><td align="center">\varepsilon</td></tr><tr><td align="center">$\zeta$</td><td align="center">\zeta</td><td align="center">$\eta$</td><td align="center">\eta</td></tr><tr><td align="center">$\theta$</td><td align="center">\theta</td><td align="center">$\vartheta$</td><td align="center">\vartheta</td></tr><tr><td align="center">$\iota$</td><td align="center">\iota</td><td align="center">$\kappa$</td><td align="center">\kappa</td></tr><tr><td align="center">$\lambda$</td><td align="center">\lambda</td><td align="center">$\mu$</td><td align="center">\mu</td></tr><tr><td align="center">$\nu$</td><td align="center">\nu</td><td align="center">$\xi$</td><td align="center">\xi</td></tr><tr><td align="center">$o$</td><td align="center">o</td><td align="center">$\pi$</td><td align="center">\pi</td></tr><tr><td align="center">$\varpi$</td><td align="center">\varpi</td><td align="center">$\rho$</td><td align="center">\rho</td></tr><tr><td align="center">$\varrho$</td><td align="center">\varrho</td><td align="center">$\sigma$</td><td align="center">\sigma</td></tr><tr><td align="center">$\varsigma$</td><td align="center">\varsigma</td><td align="center">$\tau$</td><td align="center">\tau</td></tr><tr><td align="center">$\upsilon$</td><td align="center">\upsilon</td><td align="center">$\phi$</td><td align="center">\phi</td></tr><tr><td align="center">$\varphi$</td><td align="center">\varphi</td><td align="center">$\chi$</td><td align="center">\chi</td></tr><tr><td align="center">$\psi$</td><td align="center">\psi</td><td align="center">$\omega$</td><td align="center">\omega</td></tr><tr><td align="center">$\Gamma$</td><td align="center">\Gamma</td><td align="center">$\varGamma$</td><td align="center">\varGamma</td></tr><tr><td align="center">$\Delta$</td><td align="center">\Delta</td><td align="center">$\varDelta$</td><td align="center">\varDelta</td></tr><tr><td align="center">$\Theta$</td><td align="center">\Theta</td><td align="center">$\varTheta$</td><td align="center">\varTheta</td></tr><tr><td align="center">$\Lambda$</td><td align="center">\Lambda</td><td align="center">$\varLambda$</td><td align="center">\varLambda</td></tr><tr><td align="center">$\Sigma$</td><td align="center">\Sigma</td><td align="center">$\varSigma$</td><td align="center">\varSigma</td></tr><tr><td align="center">$\Phi$</td><td align="center">\Phi</td><td align="center">$\varPhi$</td><td align="center">\varPhi</td></tr><tr><td align="center">$\Psi$</td><td align="center">\Psi</td><td align="center">$\varPsi$</td><td align="center">\varPsi</td></tr><tr><td align="center">$\Omega$</td><td align="center">\Omega</td><td align="center">$\varOmega$</td><td align="center">\varOmega</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex常用符号</title>
      <link href="/2019/08/13/latex-chang-yong-fu-hao/"/>
      <url>/2019/08/13/latex-chang-yong-fu-hao/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">符号名称</th><th align="center">示例</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">任意</td><td align="center">$\forall$</td><td align="center">\forall</td></tr><tr><td align="center">属于</td><td align="center">$\in$</td><td align="center">\in</td></tr><tr><td align="center">包含</td><td align="center">$\subset$</td><td align="center">\subset</td></tr><tr><td align="center">真子集</td><td align="center">$\subseteq$</td><td align="center">\subseteq</td></tr><tr><td align="center">箭头</td><td align="center">$\to$</td><td align="center">\to</td></tr><tr><td align="center">双箭头</td><td align="center">$\Rightarrow,\Leftarrow$</td><td align="center">\Rightarrow,\Leftarrow</td></tr><tr><td align="center">范数</td><td align="center">$\lVert x\rVert$</td><td align="center">\lVert x\rVert</td></tr><tr><td align="center">求和</td><td align="center">$\sum_{i=1}^{n}$</td><td align="center">\sum_{i=1}^{n}</td></tr><tr><td align="center">分数</td><td align="center">$\frac{1}{n}$</td><td align="center">\frac{1}{n}</td></tr><tr><td align="center">无穷</td><td align="center">$\infty$</td><td align="center">\infty</td></tr><tr><td align="center">最大值</td><td align="center">$\mathop{max}\limits_{x \in R}$</td><td align="center">\mathop{max}\limits_{x \in R}</td></tr><tr><td align="center">上确界</td><td align="center">$\mathop{sup}\limits_{x \in R}$</td><td align="center">\mathop{sup}\limits_{x \in R}</td></tr><tr><td align="center">大(小)于等于</td><td align="center">$\leqslant,\geqslant$</td><td align="center">\leqslant,\geqslant</td></tr><tr><td align="center">不等于</td><td align="center">$\neq$</td><td align="center">\neq</td></tr><tr><td align="center">定义为</td><td align="center">$\triangleq$</td><td align="center">\triangleq</td></tr><tr><td align="center">闭包</td><td align="center">$\overline{A}$</td><td align="center">\overline{A}</td></tr><tr><td align="center">内积</td><td align="center">$\langle x,y\rangle$</td><td align="center">\langle x,y\rangle</td></tr><tr><td align="center">微分</td><td align="center">$\partial$</td><td align="center">\partial</td></tr><tr><td align="center">积分</td><td align="center">$\int_{a}^{b}$</td><td align="center">\int_{a}^{b}</td></tr><tr><td align="center">圆括号矩阵</td><td align="center">$\begin{pmatrix}A&amp;B\C&amp;D\end{pmatrix}$</td><td align="center">\begin{pmatrix}A&amp;B\C&amp;D\end{pmatrix}</td></tr><tr><td align="center">加减号</td><td align="center">$\pm,\mp$</td><td align="center">\pm,\mp</td></tr><tr><td align="center">梯度</td><td align="center">$\nabla$</td><td align="center">\nabla</td></tr><tr><td align="center">空集</td><td align="center">$\varnothing$</td><td align="center">\varnothing</td></tr><tr><td align="center">交集</td><td align="center">$\bigcap$</td><td align="center">\bigcap</td></tr><tr><td align="center">并集</td><td align="center">$\bigcup$</td><td align="center">\bigcup</td></tr><tr><td align="center">叉乘</td><td align="center">$\times$</td><td align="center">\times</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zerotier内网穿透</title>
      <link href="/2019/08/08/zerotier-nei-wang-chuan-tou/"/>
      <url>/2019/08/08/zerotier-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<p>Zerotier是一个使用开源免费协议的点对点内网穿透工具,当然有收费的,但是普通用户使用免费的已经足够了.<br>点对点当然比花生壳优越无数倍,花生壳的小水管只能用来远程管理一下网页,看视频同步相册什么的还是别想了.下面是使用教程.<br>###注册账号</p><ul><li>进入官网,<a href="https://www.zerotier.com/">https://www.zerotier.com/</a>,点击<strong>LOGIN</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/18751695-039c06825bea0660.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>点击<strong>Creat An Account</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/18751695-4e8ed3a8355bb72b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>输入邮箱地址,以及密码,然后创建</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/18751695-4aa890cb875ab85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>收到邮件后激活,然后如图,点击<strong>Networks</strong>,再点击创建网络.</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/18751695-2c3deed2c4cf1da4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-a191f18f7f217a60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>创建成功后,进入创建的网络,记住网络ID,就是Network ID,很显眼的一串代码.</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/18751695-6360558bd345e5a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>往下拉,找到上图的添加成员,以后每在设备上安装一个,都要进官网来添加一下成员.</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/18751695-8a128741791ad410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>官网就暂告一段落了.</li></ul><p>###LEDE下安装Zerotier<br>详情见链接<a href="http://koolshare.cn/thread-152561-1-1.html">http://koolshare.cn/thread-152561-1-1.html</a><br>###客户端安装Zerotier<br>手机端直接应用商店搜索zerotier就行，打开应用把你官网的ID输入就好了，记得去官网网络列表里授权。</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LEDE获取ipv6</title>
      <link href="/2019/07/30/lede-huo-qu-ipv6-di-zhi/"/>
      <url>/2019/07/30/lede-huo-qu-ipv6-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>关于软路由ipv6与外网访问的那些事（已更新）<br><a href="https://koolshare.cn/thread-165156-1-1.html">https://koolshare.cn/thread-165156-1-1.html</a><br>(出处: KoolShare)<br>我是快乐的搬运工!<br>###LEDE-ipv6设置</p><ol><li>删除自带WAN6<img src="https://upload-images.jianshu.io/upload_images/18751695-274ac9c12d55320e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>依次进入&gt;<strong>网络</strong>&gt;<strong>接口</strong>，点击lan里面的<strong>高级设置</strong>，确保使用内置的 IPv6 管理打勾状态。<br><img src="https://upload-images.jianshu.io/upload_images/18751695-e5170a61c4786473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>接着往下，DHCP 服务器&gt;Ipv6设置里按下图选择<img src="https://upload-images.jianshu.io/upload_images/18751695-f63ffe211a49e775.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>依次进&gt;网络&gt;负载均衡，点击<strong>策略</strong>选项，将里面所有的备用成员改为<strong>默认（使用主路由表）</strong>。<img src="https://upload-images.jianshu.io/upload_images/18751695-d2280a63a5ebb12a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>依次进&gt;网络&gt;负载均衡，点击 规则 选项，将里面所有的 分配的策略改为 默认（使用主路由表）。如图所示<img src="https://upload-images.jianshu.io/upload_images/18751695-bbb2b2f46d3ae17f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>以上所有设置全部保存并应用后，如下图所示，会看到你已经获得了ipv6,并会给内网设备自己分配ipv6地址了.<img src="https://upload-images.jianshu.io/upload_images/18751695-14aa7784a88bb33f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 软路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器插件推荐</title>
      <link href="/2019/07/19/chrome-liu-lan-qi-cha-jian-tui-jian/"/>
      <url>/2019/07/19/chrome-liu-lan-qi-cha-jian-tui-jian/</url>
      
        <content type="html"><![CDATA[<hr><p>####油猴插件<br><img src="https://upload-images.jianshu.io/upload_images/18751695-b8255801bcea64cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>鼎鼎大名的油猴插件,安装链接<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo</a><br>这个插件可以提供各式各样的功能,比如百度去广告搜索,VIP视频解析,B站区域解锁,购物比价等等,相当于一个小型应用商店.<br>大家可以在这个网站<a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a>来浏览你需要的功能,安装对应的脚本就可以.如下图<br><img src="https://upload-images.jianshu.io/upload_images/18751695-e3ae0eec95950779.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-423e226ddd7ccca2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-d4354c3076e12da0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-63a1dbc7184fa0e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>点安装就可以了</p><hr><h2 id="IE-Tab应用链接-https-chrome-google-com-webstore-detail-ie-tab-hehijbfgiekmjfkfjpbkbammjbdenadd可以在chrome上打开一些需要用IE浏览器才能打开的网站-一般是老旧的政府网站-不过这个插件用到的机会越来越少了"><a href="#IE-Tab应用链接-https-chrome-google-com-webstore-detail-ie-tab-hehijbfgiekmjfkfjpbkbammjbdenadd可以在chrome上打开一些需要用IE浏览器才能打开的网站-一般是老旧的政府网站-不过这个插件用到的机会越来越少了" class="headerlink" title="####IE Tab应用链接:https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd可以在chrome上打开一些需要用IE浏览器才能打开的网站,一般是老旧的政府网站,不过这个插件用到的机会越来越少了."></a>####IE Tab<br><img src="https://upload-images.jianshu.io/upload_images/18751695-62a7bbbaf00c0d48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>应用链接:<a href="https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd">https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd</a><br>可以在chrome上打开一些需要用IE浏览器才能打开的网站,一般是老旧的政府网站,不过这个插件用到的机会越来越少了.</h2><h2 id="Chrono下载管理器如果你也和我一样对Chrome自带的下载器无感-那么这个是你很好的选择-应用商店链接-https-chrome-google-com-webstore-detail-chrono-download-manager-mciiogijehkdemklbdcbfkefimifhecn"><a href="#Chrono下载管理器如果你也和我一样对Chrome自带的下载器无感-那么这个是你很好的选择-应用商店链接-https-chrome-google-com-webstore-detail-chrono-download-manager-mciiogijehkdemklbdcbfkefimifhecn" class="headerlink" title="####Chrono下载管理器如果你也和我一样对Chrome自带的下载器无感,那么这个是你很好的选择.应用商店链接:https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn"></a>####Chrono下载管理器<br><img src="https://upload-images.jianshu.io/upload_images/18751695-84a52a0d3f491b22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>如果你也和我一样对Chrome自带的下载器无感,那么这个是你很好的选择.<br>应用商店链接:<a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn">https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn</a></h2><h2 id="Infinity新标签页很火的一个标签页程序-应用商店链接-https-chrome-google-com-webstore-detail-infinity-new-tab-producti-dbfmnekepjoapopniengjbcpnbljalfg效果如下"><a href="#Infinity新标签页很火的一个标签页程序-应用商店链接-https-chrome-google-com-webstore-detail-infinity-new-tab-producti-dbfmnekepjoapopniengjbcpnbljalfg效果如下" class="headerlink" title="####Infinity新标签页很火的一个标签页程序,应用商店链接:https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg效果如下"></a>####Infinity新标签页<br><img src="https://upload-images.jianshu.io/upload_images/18751695-7fae7109713ed2fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>很火的一个标签页程序,应用商店链接:<a href="https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg">https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg</a><br>效果如下<br><img src="https://upload-images.jianshu.io/upload_images/18751695-dee20c07930d5734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></h2><h2 id="划词翻译很方便的一个工具-值的下载-应用商店链接-https-chrome-google-com-webstore-detail-E5-88-92-E8-AF-8D-E7-BF-BB-E8-AF-91-ikhdkkncnoglghljlkmcimlnlhkeamad"><a href="#划词翻译很方便的一个工具-值的下载-应用商店链接-https-chrome-google-com-webstore-detail-E5-88-92-E8-AF-8D-E7-BF-BB-E8-AF-91-ikhdkkncnoglghljlkmcimlnlhkeamad" class="headerlink" title="####划词翻译很方便的一个工具,值的下载.应用商店链接:https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad"></a>####划词翻译<br><img src="https://upload-images.jianshu.io/upload_images/18751695-dd37cfc20839788e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>很方便的一个工具,值的下载.应用商店链接:<br><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad">https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad</a></h2><p>后续如果还有会再增加.</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex常用数学字体</title>
      <link href="/2019/07/18/latex-chang-yong-shu-xue-zi-ti/"/>
      <url>/2019/07/18/latex-chang-yong-shu-xue-zi-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mathbb：blackboard bold，黑板粗体 </p></blockquote><p>常用作数域的表示,比如实数域,复数域等.<br><strong>包名</strong> amssymb<br><strong>用法</strong> \mathbb{}<br><strong>示例</strong>  \mathbb{C},\mathbb{R}<br><strong>效果</strong>  $\mathbb{C},\mathbb{R}$</p><blockquote><p>mathscr: 花体</p></blockquote><p>常用作空间或者变换的表示.<br><strong>包名</strong> mathrsfs<br><strong>用法</strong> \mathscr{}<br><strong>示例</strong> \mathscr{X},\mathscr{Y},\mathscr{A}<br><strong>效果</strong> $\mathscr{X},\mathscr{Y},\mathscr{A}$</p><blockquote><p>mathcal: 呃,反正是一种字体,好像在amsmath包里</p></blockquote><p>泛函分析中所有线性算子的集合$\mathcal{L}(\mathscr{X},\mathscr{Y})$ 用到了这个字体,所以应该也是空间的约定表示方式,日后了解到再说,先不管了.<br><strong>包名</strong> amssymb<br><strong>用法</strong> \mathcal{}<br><strong>示例</strong> \mathcal{L}<br><strong>效果</strong> $\mathcal{L}$</p><blockquote><p>mathfrak:具体信息不详</p></blockquote><p>紧算子的全体$\mathfrak{C}(H,K)$中用到了这个字体.<br><strong>包名</strong> amssymb<br><strong>用法</strong> \mathfrak{}<br><strong>示例</strong> \mathfrak{C}<br><strong>效果</strong> $\mathfrak{C}$</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器之PowerShell-6</title>
      <link href="/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-powershell-6/"/>
      <url>/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-powershell-6/</url>
      
        <content type="html"><![CDATA[<p>##安装PowerShell 6<br>PoweShell Core 6.0是PowerShell的新版本，它是跨平台（Windows，macOS和Linux），开源，专为异构环境和混合云构建。<br>它与win10自带的PowerShell并不是简单的更替关系,而是并行的关系,即基于.NET Framework的Windows PowerShell和基于.NET Core的 PowerShell Core.Po就目前而言,这两个PowerShell,微软都很侧重,但是对于客户来讲,跨平台的终究方便一些.这也是推荐PowerShell 6的理由.<br>这里是官方的安装指导:<a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-6">powershell 6</a><br>基本上是傻瓜操作,不过国内用户很有可能登入不了Github,这里给出百度网盘链接: <a href="https://pan.baidu.com/s/1ANgwMDJn7jPxcbfebW1dkQ">https://pan.baidu.com/s/1ANgwMDJn7jPxcbfebW1dkQ</a><br>提取码: fy9m<br>下载下直接安装即可<br><img src="https://upload-images.jianshu.io/upload_images/18751695-0e252496b0a1c6aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>一路Next下去,最后点开安装目录,找到pwsh.exe打开<br><img src="https://upload-images.jianshu.io/upload_images/18751695-130bc3add2bf6280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>到这里PowerShell6的安装就告一段落了,接下来咱们安装一下Openssh,使得在PowerShell6中可以运行ssh.<br>##安装Openssh</p><p>打开win10左下角的语音助手,搜索<em><strong>添加或删除程序</strong></em><br><img src="https://upload-images.jianshu.io/upload_images/18751695-7f2d95d0a6424f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>打开后选择可选功能<br><img src="https://upload-images.jianshu.io/upload_images/18751695-f47687c51b3bf11a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>然后点击添加功能,这里因为我已经安装上了,所以直接在下面显示出来了,你们点进去添加功能,把这两个添加上就可以了<br><img src="https://upload-images.jianshu.io/upload_images/18751695-87a5c9ac585791e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>最后测试一下,输入ssh,显示下图就可以了<br><img src="https://upload-images.jianshu.io/upload_images/18751695-9405b5a237dd58d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>##个性化PowerShell 6<br>首先更改一下配色,右键打开属性,如下<br><img src="https://upload-images.jianshu.io/upload_images/18751695-5d7e267452009894.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><img src="https://upload-images.jianshu.io/upload_images/18751695-1788eaf4a7bc3450.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>按图片设置颜色即可,这个配色是Ubuntu终端的默认配色,个人感觉还行.<br>接下来设置字体,首先给出更纱字体包链接: <a href="https://pan.baidu.com/s/1rnh1a0OYJPRVP21V_RImNw">https://pan.baidu.com/s/1rnh1a0OYJPRVP21V_RImNw</a> 提取码: ay7x<br>或者github链接<a href="https://github.com/be5invis/Sarasa-Gothic">https://github.com/be5invis/Sarasa-Gothic</a><br>这个字体号称是程序员最喜欢的字体,咱也不懂,咱也不敢说,用的人多就用呗.<br>下载下解压,然后打开windows设置<br><img src="https://upload-images.jianshu.io/upload_images/18751695-e94fc7b6701a4ff4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>然后全选字体,拖到安装区<br><img src="https://upload-images.jianshu.io/upload_images/18751695-35ec3dcb69ad4e62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>然后是一个漫长的等待过程,安装完成后打开PowerShell6 属性设置,如下图,找到这个字体<br><img src="https://upload-images.jianshu.io/upload_images/18751695-09eecdd0e80b9d17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>设置完即可.<br>##shift+右键打开PowerShell 6<br>首先打开注册表,打开如下路径</p><pre class="language-none"><code class="language-none">计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell\command</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/18751695-d9b166a194c65529.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>然后右键点开编辑<br><img src="https://upload-images.jianshu.io/upload_images/18751695-5f6782948ea3ce65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>将箭头所指的地方改成如图所示,即把PowerShell.exe替换成pwsh.exe.点确定保存,然后试试效果,打开任意文件夹,然后shift+右键<br><img src="https://upload-images.jianshu.io/upload_images/18751695-0c7843854e9a6df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>点击<em><strong>在此处打开PowerShell窗口</strong></em><br><img src="https://upload-images.jianshu.io/upload_images/18751695-a7db2d5df08e2d82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>完美!</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器之包管理神器Scoop</title>
      <link href="/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-bao-guan-li-shen-qi-scoop/"/>
      <url>/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-bao-guan-li-shen-qi-scoop/</url>
      
        <content type="html"><![CDATA[<p>可以媲美RHEL/CentOS上的yum或者Ubuntu上的apt-get的包管理器,可以实现软件自动配置安装,比如环境变量设置.<br>github链接:<a href="https://github.com/lukesampson/scoop">https://github.com/lukesampson/scoop</a><br>包含了scoop的介绍以及安装方法,英语好的同学可以直接去看,下面给出默认安装方法.<br>####scoop的安装<br>打开PowerShell 6,输入</p><pre><code> iex(new-object net.webclient).downloadstring('https://get.scoop.sh')</code></pre><p>然后看一会代码雨就安装完成了.<br>检查一下,输入scoop<br><img src="https://upload-images.jianshu.io/upload_images/18751695-6e42fe583cef81b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>####scoop使用方法<br>打开powershell6,输入指令即可,给出一个示例</p><pre><code>scoop install python</code></pre><p><em><strong>scoop</strong></em>表示是这个软件,<em><strong>install</strong></em>告诉<em><strong>scoop</strong></em>我要安装软件,<em><strong>python</strong></em>是软件名.<br>如果不确定软件库中有没有这个软件,可以使用</p><pre><code>scoop search 软件名</code></pre><p>来搜索scoop软件库中有没有这个软件.<br>当然,scoop有许多第三方软件库,毕竟软件太少可不行,使用命令</p><pre><code>scoop bucket add 软件库名</code></pre><p>可以扩展scoop的软件库,下面是scoop常用的第三方软件库,把软件库名替换成名字就行</p><ul><li><p><a href="https://github.com/ScoopInstaller/Main">main</a>&nbsp;- Default bucket for the most common (mostly CLI) apps</p></li><li><p><a href="https://github.com/lukesampson/scoop-extras">extras</a>&nbsp;- Apps that don’t fit the main bucket’s&nbsp;<a href="https://github.com/lukesampson/scoop/wiki/Criteria-for-including-apps-in-the-main-bucket">criteria</a></p></li><li><p><a href="https://github.com/Calinou/scoop-games">games</a>&nbsp;- Open source/freeware games and game-related tools</p></li><li><p><a href="https://github.com/matthewjberger/scoop-nerd-fonts">nerd-fonts</a>&nbsp;- Nerd Fonts</p></li><li><p><a href="https://github.com/kodybrown/scoop-nirsoft">nirsoft</a>&nbsp;- A subset of the&nbsp;<a href="https://github.com/rasa/scoop-directory/blob/master/by-score.md#MCOfficer_scoop-nirsoft">250</a>&nbsp;<a href="https://nirsoft.net/">Nirsoft</a>&nbsp;apps</p></li><li><p><a href="https://github.com/ScoopInstaller/Java">java</a>&nbsp;- Installers for Oracle Java, OpenJDK, Zulu, ojdkbuild, AdoptOpenJDK, Amazon Corretto, BellSoft Liberica &amp; SapMachine</p></li><li><p><a href="https://github.com/Ash258/Scoop-JetBrains">jetbrains</a>&nbsp;- Installers for all JetBrains utilities and IDEs</p></li><li><p><a href="https://github.com/oltolm/scoop-nonportable">nonportable</a>&nbsp;- Non-portable apps (may require UAC)</p></li><li><p><a href="https://github.com/ScoopInstaller/PHP">php</a>&nbsp;- Installers for most versions of PHP</p></li><li><p><a href="https://github.com/ScoopInstaller/Versions">versions</a>&nbsp;- Alternative versions of apps found in other buckets</p></li></ul><p>####scoop默认位置<br>位于</p><pre><code>C:\Users\用户名\scoop</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/18751695-e258efc7d4e0b510.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>下载的软件在apps里,下面是我用的软件.<br><img src="https://upload-images.jianshu.io/upload_images/18751695-c53e36ca14605f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器之懒人版Potplayer</title>
      <link href="/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-lan-ren-ban-potplayer/"/>
      <url>/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-lan-ren-ban-potplayer/</url>
      
        <content type="html"><![CDATA[<p>今天推荐的是一个播放器-<strong>完美解码</strong>,贴出官网地址<br><a href="http://jm.wmzhe.com/">http://jm.wmzhe.com/</a><br>有人会问,标题不是说Potplayer吗?怎么又变成了完美解码,这是因为完美解码本身只是一个套壳的安装器而已,如下</p><p><img src="https://upload-images.jianshu.io/upload_images/18751695-db49ae6168eb24ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>大家也可以按照我的设置来安装<br>那为什么不直接安装potplayer呢?关键在于三个滤镜:LAV Filters,madVR和XySubFilter<br>madVR可以说是地表最强渲染器,如果硬件设备够好的话,设置得当可以媲美蓝光播放器,当然一般用户默认配置就够了,别太折腾了.<br>如果是官网的potplayer的话,安装这三个滤镜还有设置挺麻烦的,而完美解码可以自动设置好,这也是为什么称它为懒人版potplayer的原因.<br>对了,上面那个图的设置可以在完美解码设置里更改,如下<br><img src="https://upload-images.jianshu.io/upload_images/18751695-7c9f91416c0eea13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>最后放一个效果图,可以看到LAV可以把25帧补成60帧,还是挺流畅的.<br><img src="https://upload-images.jianshu.io/upload_images/18751695-b41f847c80d46e28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>最后给出一点福利,在potplayer上看电视直播还是挺爽的<br><img src="https://upload-images.jianshu.io/upload_images/18751695-3c492e8b6b2d90ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>只需要将下面的文件复制到新建文本里,然后改后缀名为m3u,最后用porplayer打开就可以看了.</p><pre class="language-none"><code class="language-none">#EXTM3U#EXTINF:-1 ,CCTV1http://111.12.110.78:6610/000000001000/1000000001000021973/1.m3u8?channel-id=ystenlive&amp;Contentid=1000000001000021973&amp;livemode=1&amp;stbId=005203FF000360100001001A34C0CD33&amp;userToken=e15b57852d9cd94f58b9ccb1755d812821vv&amp;usergroup=g21077200000&amp;version=1.0&amp;owaccmark=1000000001000021973&amp;owchid=ystenlive&amp;owsid=4493204828791368248&amp;AuthInfo=yOLXJswzZFfV3FvB8MhHuElKGJKLbU5H0jB3qAhfSE4tSgi1FxmNHE0q06AvCn9dwOlYVpJs9gkET3fw7mWFANOKWzAL1vVaH8fJApjjCUBdxIvdqN%2fANZNkqsUShyN2&amp;IASHttpSessionId=SLB379520180727143626843453#EXTINF:-1 ,CCTV2http://111.12.110.78:6610/000000001000/1000000001000012442/1.m3u8?channel-id=ystenlive&amp;Contentid=1000000001000012442&amp;livemode=1&amp;stbId=005203FF000360100001001A34C0CD33&amp;userToken=e15b57852d9cd94f58b9ccb1755d812821vv&amp;usergroup=g21077200000&amp;version=1.0&amp;owaccmark=1000000001000012442&amp;owchid=ystenlive&amp;owsid=4493204828791614401&amp;AuthInfo=yOLXJswzZFfV3FvB8MhHuElKGJKLbU5H0jB3qAhfSE4tSgi1FxmNHE0q06AvCn9dyx7PTkABdNbKa4SbgCy21JLBAKYTiZvXFSRpJG%2fkJI2P2CoFHDjQTfn0SFVF%2fSxm&amp;IASHttpSessionId=SLB380220180727145227819837#EXTINF:-1 ,CCTV5http://223.110.245.136/PLTV/3/224/3221227166/index.m3u8#EXTINF:-1 ,CCTV10http://111.12.110.76:6610/000000001000/7019587760656900133/1.m3u8?channel-id=ystenlive&amp;Contentid=7019587760656900133&amp;livemode=1&amp;stbId=005203FF000360100001001A34C0CD33&amp;userToken=e15b57852d9cd94f58b9ccb1755d812821vv&amp;usergroup=g21077200000&amp;version=1.0&amp;owaccmark=7019587760656900133&amp;owchid=ystenlive&amp;owsid=4493204828791695450&amp;AuthInfo=yOLXJswzZFfV3FvB8MhHuElKGJKLbU5H0jB3qAhfSE4jny0dcTkc6Mv3O2WQVyOPy0kgVchi2KKTsM9Fvtix3LYTQy8EYgJFO6mzlXBzaWlf0T3sLEMUoaUn4xwDGpCo&amp;IASHttpSessionId=SLB379120180727145744957809#EXTINF:-1 ,CCTV新闻http://111.12.110.78:6610/000000001000/6918130250570453526/1.m3u8?channel-id=ystenlive&amp;Contentid=6918130250570453526&amp;livemode=1&amp;stbId=005203FF000360100001001A34C0CD33&amp;userToken=e15b57852d9cd94f58b9ccb1755d812821vv&amp;usergroup=g21077200000&amp;version=1.0&amp;owaccmark=6918130250570453526&amp;owchid=ystenlive&amp;owsid=4493204828791728820&amp;AuthInfo=yOLXJswzZFfV3FvB8MhHuElKGJKLbU5H0jB3qAhfSE5SJckYix32FQdWweMjZIfA%2fb3c6oce5W%2ffJT7MwPW%2fIEuLykCNnwtEYqj9vsrno4cPWC1tbj9jLkqzQnhkro8C&amp;IASHttpSessionId=SLB381020180727145954813883#EXTINF:-1 ,湖南卫视http://111.12.110.76:6610/000000001000/1000000001000009115/1.m3u8?channel-id=ystenlive&amp;Contentid=1000000001000009115&amp;livemode=1&amp;stbId=005203FF000360100001001A34C0CD33&amp;userToken=e15b57852d9cd94f58b9ccb1755d812821vv&amp;usergroup=g21077200000&amp;version=1.0&amp;owaccmark=1000000001000009115&amp;owchid=ystenlive&amp;owsid=4493204828791864978&amp;AuthInfo=yOLXJswzZFfV3FvB8MhHuElKGJKLbU5H0jB3qAhfSE4tSgi1FxmNHE0q06AvCn9dWG2bNAzK0hBtOreAuPMMyuA3%2fCap3NbTkoQCOAf0UigRJlbvvBWR5%2bPn69f%2bZBK6&amp;IASHttpSessionId=SLB379820180727150846834964#EXTINF:-1 ,江苏卫视http://112.50.243.7/PLTV/88888888/224/3221225847/index.m3u8#EXTINF:-1 ,江苏卫视-高清http://112.50.243.7/PLTV/88888888/224/3221225930/index.m3u8#EXTINF:-1 ,浙江卫视http://112.50.243.7/PLTV/88888888/224/3221225934/index.m3u8#EXTINF:-1 ,凤凰资讯HDhttp://117.169.120.138:8080/live/fhzixun/.m3u8#EXTINF:-1 ,凤凰资讯http://183.251.61.198/PLTV/88888888/224/3221225901/index.m3u8</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器之截图Snipaste</title>
      <link href="/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-jie-tu-ruan-jian-snipaste-fen-xiang/"/>
      <url>/2019/07/05/gong-yu-shan-qi-shi-bi-xian-li-qi-qi-zhi-jie-tu-ruan-jian-snipaste-fen-xiang/</url>
      
        <content type="html"><![CDATA[<p>首先贴出官网地址:<br><a href="https://www.snipaste.com/">https://www.snipaste.com</a><br>下面是官网的宣传图<br><img src="https://upload-images.jianshu.io/upload_images/18751695-6d2d06ea6e8779c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>默认F1是截图键,当你按下F1后会智能识别你的窗口,再也不用一点一点的对齐了.除此之外的F3贴图功能有时候是真的很方便!<br>之后我所有的文章都会用这个软件来截图!</p>]]></content>
      
      
      <categories>
          
          <category> 日常技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑软件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
